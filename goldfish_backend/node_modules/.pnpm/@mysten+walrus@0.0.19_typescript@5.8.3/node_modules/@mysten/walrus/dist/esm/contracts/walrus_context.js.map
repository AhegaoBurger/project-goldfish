{
  "version": 3,
  "sources": ["../../../src/contracts/walrus_context.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport * as vec_map from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_map.js';\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function WalrusContext() {\n\treturn bcs.struct('WalrusContext', {\n\t\tepoch: bcs.u32(),\n\t\tcommittee_selected: bcs.bool(),\n\t\tcommittee: vec_map.VecMap(bcs.Address, bcs.vector(bcs.u16())),\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction _new(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<number>,\n\t\t\tRawTransactionArgument<boolean>,\n\t\t\tRawTransactionArgument<string>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t'u32',\n\t\t\t'bool',\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::vec_map::VecMap<0x0000000000000000000000000000000000000000000000000000000000000002::object::ID, vector<u16>>',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'walrus_context',\n\t\t\t\tfunction: 'new',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction epoch(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::walrus_context::WalrusContext`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'walrus_context',\n\t\t\t\tfunction: 'epoch',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction committee_selected(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::walrus_context::WalrusContext`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'walrus_context',\n\t\t\t\tfunction: 'committee_selected',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction committee(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::walrus_context::WalrusContext`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'walrus_context',\n\t\t\t\tfunction: 'committee',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\treturn { _new, epoch, committee_selected, committee };\n}\n"],
  "mappings": "AAGA,SAAS,WAAW;AAGpB,YAAY,aAAa;AACzB,SAAS,8BAA8B;AAGhC,SAAS,gBAAgB;AAC/B,SAAO,IAAI,OAAO,iBAAiB;AAAA,IAClC,OAAO,IAAI,IAAI;AAAA,IACf,oBAAoB,IAAI,KAAK;AAAA,IAC7B,WAAW,QAAQ,OAAO,IAAI,SAAS,IAAI,OAAO,IAAI,IAAI,CAAC,CAAC;AAAA,EAC7D,CAAC;AACF;AACO,SAAS,KAAK,gBAAwB;AAC5C,WAAS,KAAK,SAMX;AACF,UAAM,iBAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,MAAM,SAA0D;AACxE,UAAM,iBAAiB,CAAC,GAAG,cAAc,iCAAiC;AAC1E,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,mBAAmB,SAA0D;AACrF,UAAM,iBAAiB,CAAC,GAAG,cAAc,iCAAiC;AAC1E,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,UAAU,SAA0D;AAC5E,UAAM,iBAAiB,CAAC,GAAG,cAAc,iCAAiC;AAC1E,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,SAAO,EAAE,MAAM,OAAO,oBAAoB,UAAU;AACrD;",
  "names": []
}
