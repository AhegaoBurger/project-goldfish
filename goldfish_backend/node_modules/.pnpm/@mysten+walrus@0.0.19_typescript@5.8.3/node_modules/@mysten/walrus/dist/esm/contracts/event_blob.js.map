{
  "version": 3,
  "sources": ["../../../src/contracts/event_blob.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport * as vec_map from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_map.js';\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function EventBlobAttestation() {\n\treturn bcs.struct('EventBlobAttestation', {\n\t\tcheckpoint_sequence_num: bcs.u64(),\n\t\tepoch: bcs.u32(),\n\t});\n}\nexport function EventBlob() {\n\treturn bcs.struct('EventBlob', {\n\t\tblob_id: bcs.u256(),\n\t\tending_checkpoint_sequence_number: bcs.u64(),\n\t});\n}\nexport function EventBlobCertificationState() {\n\treturn bcs.struct('EventBlobCertificationState', {\n\t\tlatest_certified_blob: bcs.option(EventBlob()),\n\t\taggregate_weight_per_blob: vec_map.VecMap(EventBlob(), bcs.u16()),\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction new_attestation(options: {\n\t\targuments: [RawTransactionArgument<number | bigint>, RawTransactionArgument<number>];\n\t}) {\n\t\tconst argumentsTypes = ['u64', 'u32'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'new_attestation',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction last_attested_event_blob_checkpoint_seq_num(options: {\n\t\targuments: [RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::event_blob::EventBlobAttestation`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'last_attested_event_blob_checkpoint_seq_num',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction last_attested_event_blob_epoch(options: {\n\t\targuments: [RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::event_blob::EventBlobAttestation`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'last_attested_event_blob_epoch',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction new_event_blob(options: {\n\t\targuments: [RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>];\n\t}) {\n\t\tconst argumentsTypes = ['u64', 'u256'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'new_event_blob',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction blob_id(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::event_blob::EventBlob`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'blob_id',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction ending_checkpoint_sequence_number(options: {\n\t\targuments: [RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::event_blob::EventBlob`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'ending_checkpoint_sequence_number',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction create_with_empty_state(options: { arguments: [] }) {\n\t\tconst argumentsTypes: string[] = [];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'create_with_empty_state',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction get_latest_certified_blob_id(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::event_blob::EventBlobCertificationState`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'get_latest_certified_blob_id',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction get_latest_certified_checkpoint_sequence_number(options: {\n\t\targuments: [RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::event_blob::EventBlobCertificationState`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'get_latest_certified_checkpoint_sequence_number',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction get_num_tracked_blobs(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::event_blob::EventBlobCertificationState`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'get_num_tracked_blobs',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction is_blob_already_certified(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::event_blob::EventBlobCertificationState`, 'u64'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'is_blob_already_certified',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction update_latest_certified_event_blob(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::event_blob::EventBlobCertificationState`,\n\t\t\t'u64',\n\t\t\t'u256',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'update_latest_certified_event_blob',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction update_aggregate_weight(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t\tRawTransactionArgument<number>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::event_blob::EventBlobCertificationState`,\n\t\t\t'u256',\n\t\t\t'u64',\n\t\t\t'u16',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'update_aggregate_weight',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction start_tracking_blob(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::event_blob::EventBlobCertificationState`,\n\t\t\t'u256',\n\t\t\t'u64',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'start_tracking_blob',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction reset(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::event_blob::EventBlobCertificationState`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'event_blob',\n\t\t\t\tfunction: 'reset',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\treturn {\n\t\tnew_attestation,\n\t\tlast_attested_event_blob_checkpoint_seq_num,\n\t\tlast_attested_event_blob_epoch,\n\t\tnew_event_blob,\n\t\tblob_id,\n\t\tending_checkpoint_sequence_number,\n\t\tcreate_with_empty_state,\n\t\tget_latest_certified_blob_id,\n\t\tget_latest_certified_checkpoint_sequence_number,\n\t\tget_num_tracked_blobs,\n\t\tis_blob_already_certified,\n\t\tupdate_latest_certified_event_blob,\n\t\tupdate_aggregate_weight,\n\t\tstart_tracking_blob,\n\t\treset,\n\t};\n}\n"],
  "mappings": "AAGA,SAAS,WAAW;AAGpB,YAAY,aAAa;AACzB,SAAS,8BAA8B;AAGhC,SAAS,uBAAuB;AACtC,SAAO,IAAI,OAAO,wBAAwB;AAAA,IACzC,yBAAyB,IAAI,IAAI;AAAA,IACjC,OAAO,IAAI,IAAI;AAAA,EAChB,CAAC;AACF;AACO,SAAS,YAAY;AAC3B,SAAO,IAAI,OAAO,aAAa;AAAA,IAC9B,SAAS,IAAI,KAAK;AAAA,IAClB,mCAAmC,IAAI,IAAI;AAAA,EAC5C,CAAC;AACF;AACO,SAAS,8BAA8B;AAC7C,SAAO,IAAI,OAAO,+BAA+B;AAAA,IAChD,uBAAuB,IAAI,OAAO,UAAU,CAAC;AAAA,IAC7C,2BAA2B,QAAQ,OAAO,UAAU,GAAG,IAAI,IAAI,CAAC;AAAA,EACjE,CAAC;AACF;AACO,SAAS,KAAK,gBAAwB;AAC5C,WAAS,gBAAgB,SAEtB;AACF,UAAM,iBAAiB,CAAC,OAAO,KAAK;AACpC,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,4CAA4C,SAElD;AACF,UAAM,iBAAiB,CAAC,GAAG,cAAc,oCAAoC;AAC7E,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,+BAA+B,SAErC;AACF,UAAM,iBAAiB,CAAC,GAAG,cAAc,oCAAoC;AAC7E,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,eAAe,SAErB;AACF,UAAM,iBAAiB,CAAC,OAAO,MAAM;AACrC,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,QAAQ,SAA0D;AAC1E,UAAM,iBAAiB,CAAC,GAAG,cAAc,yBAAyB;AAClE,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,kCAAkC,SAExC;AACF,UAAM,iBAAiB,CAAC,GAAG,cAAc,yBAAyB;AAClE,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,wBAAwB,SAA4B;AAC5D,UAAM,iBAA2B,CAAC;AAClC,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,6BAA6B,SAA0D;AAC/F,UAAM,iBAAiB,CAAC,GAAG,cAAc,2CAA2C;AACpF,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,gDAAgD,SAEtD;AACF,UAAM,iBAAiB,CAAC,GAAG,cAAc,2CAA2C;AACpF,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,sBAAsB,SAA0D;AACxF,UAAM,iBAAiB,CAAC,GAAG,cAAc,2CAA2C;AACpF,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,0BAA0B,SAEhC;AACF,UAAM,iBAAiB,CAAC,GAAG,cAAc,6CAA6C,KAAK;AAC3F,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,mCAAmC,SAMzC;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB;AAAA,MACA;AAAA,IACD;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,wBAAwB,SAO9B;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,oBAAoB,SAM1B;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB;AAAA,MACA;AAAA,IACD;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,MAAM,SAA0D;AACxE,UAAM,iBAAiB,CAAC,GAAG,cAAc,2CAA2C;AACpF,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACD;",
  "names": []
}
