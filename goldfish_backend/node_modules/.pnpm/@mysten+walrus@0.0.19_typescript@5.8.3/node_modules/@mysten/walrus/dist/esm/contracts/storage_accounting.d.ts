import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function FutureAccounting(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    used_capacity: string;
    rewards_to_distribute: {
        value: string;
    };
}, {
    epoch: number;
    used_capacity: string | number | bigint;
    rewards_to_distribute: {
        value: string | number | bigint;
    };
}>;
export declare function FutureAccountingRingBuffer(): import("@mysten/sui/bcs").BcsType<{
    current_index: number;
    length: number;
    ring_buffer: {
        epoch: number;
        used_capacity: string;
        rewards_to_distribute: {
            value: string;
        };
    }[];
}, {
    current_index: number;
    length: number;
    ring_buffer: Iterable<{
        epoch: number;
        used_capacity: string | number | bigint;
        rewards_to_distribute: {
            value: string | number | bigint;
        };
    }> & {
        length: number;
    };
}>;
export declare function init(packageAddress: string): {
    new_future_accounting: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number | bigint>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    used_capacity: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    increase_used_capacity: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    rewards_balance: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    delete_empty_future_accounting: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    unwrap_balance: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    ring_new: (options: {
        arguments: [RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    ring_lookup_mut: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    ring_pop_expand: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    max_epochs_ahead: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
