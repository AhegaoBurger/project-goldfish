import type { BcsType } from '@mysten/sui/bcs';
import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function Authenticated(): BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Sender: string;
    Object: string;
}, "Object" | "Sender">, import("@mysten/bcs").EnumInputShape<{
    Sender: string | Uint8Array<ArrayBufferLike>;
    Object: string | Uint8Array<ArrayBufferLike>;
}>>;
export declare function Authorized(): BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Address: string;
    ObjectID: string;
}, "Address" | "ObjectID">, import("@mysten/bcs").EnumInputShape<{
    Address: string | Uint8Array<ArrayBufferLike>;
    ObjectID: string | Uint8Array<ArrayBufferLike>;
}>>;
export declare function init(packageAddress: string): {
    authenticate_sender: (options: {
        arguments: [];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    authenticate_with_object: <T0 extends BcsType<any>>(options: {
        arguments: [RawTransactionArgument<T0>];
        typeArguments: [string];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    authorized_address: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    authorized_object: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    matches: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
