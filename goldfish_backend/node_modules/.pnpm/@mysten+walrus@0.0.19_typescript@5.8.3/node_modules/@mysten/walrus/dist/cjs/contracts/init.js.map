{
  "version": 3,
  "sources": ["../../../src/contracts/init.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport * as object from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js';\nimport * as _package from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/package.js';\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function INIT() {\n\treturn bcs.struct('INIT', {\n\t\tdummy_field: bcs.bool(),\n\t});\n}\nexport function InitCap() {\n\treturn bcs.struct('InitCap', {\n\t\tid: object.UID(),\n\t\tpublisher: _package.Publisher(),\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction init(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::init::INIT`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'init',\n\t\t\t\tfunction: 'init',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction initialize_walrus(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t\tRawTransactionArgument<number>,\n\t\t\tRawTransactionArgument<number>,\n\t\t\tRawTransactionArgument<string>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::init::InitCap`,\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::package::UpgradeCap',\n\t\t\t'u64',\n\t\t\t'u64',\n\t\t\t'u16',\n\t\t\t'u32',\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'init',\n\t\t\t\tfunction: 'initialize_walrus',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction migrate(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::staking::Staking`,\n\t\t\t`${packageAddress}::system::System`,\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'init',\n\t\t\t\tfunction: 'migrate',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\treturn { init, initialize_walrus, migrate };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAAoB;AAGpB,aAAwB;AACxB,eAA0B;AAC1B,mBAAuC;AAGhC,SAAS,OAAO;AACtB,SAAO,eAAI,OAAO,QAAQ;AAAA,IACzB,aAAa,eAAI,KAAK;AAAA,EACvB,CAAC;AACF;AACO,SAAS,UAAU;AACzB,SAAO,eAAI,OAAO,WAAW;AAAA,IAC5B,IAAI,OAAO,IAAI;AAAA,IACf,WAAW,SAAS,UAAU;AAAA,EAC/B,CAAC;AACF;AACO,SAAS,KAAK,gBAAwB;AAC5C,WAASA,MAAK,SAA0D;AACvE,UAAM,iBAAiB,CAAC,GAAG,cAAc,cAAc;AACvD,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,eAAW,qCAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,kBAAkB,SAUxB;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,eAAW,qCAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,QAAQ,SAEd;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB,GAAG,cAAc;AAAA,IAClB;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,eAAW,qCAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,SAAO,EAAE,MAAAA,OAAM,mBAAmB,QAAQ;AAC3C;",
  "names": ["init"]
}
