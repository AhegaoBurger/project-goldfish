import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js";
import { normalizeMoveArguments } from "./utils/index.js";
function ExtendedField() {
  return bcs.struct("ExtendedField", {
    id: object.UID()
  });
}
function Key() {
  return bcs.struct("Key", {
    dummy_field: bcs.bool()
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = [`${options.typeArguments[0]}`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "extended_field",
      function: "new",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes),
      typeArguments: options.typeArguments
    });
  }
  function borrow(options) {
    const argumentsTypes = [
      `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "extended_field",
      function: "borrow",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes),
      typeArguments: options.typeArguments
    });
  }
  function borrow_mut(options) {
    const argumentsTypes = [
      `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "extended_field",
      function: "borrow_mut",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes),
      typeArguments: options.typeArguments
    });
  }
  function swap(options) {
    const argumentsTypes = [
      `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`,
      `${options.typeArguments[0]}`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "extended_field",
      function: "swap",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes),
      typeArguments: options.typeArguments
    });
  }
  function destroy(options) {
    const argumentsTypes = [
      `${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "extended_field",
      function: "destroy",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes),
      typeArguments: options.typeArguments
    });
  }
  return { _new, borrow, borrow_mut, swap, destroy };
}
export {
  ExtendedField,
  Key,
  init
};
//# sourceMappingURL=extended_field.js.map
