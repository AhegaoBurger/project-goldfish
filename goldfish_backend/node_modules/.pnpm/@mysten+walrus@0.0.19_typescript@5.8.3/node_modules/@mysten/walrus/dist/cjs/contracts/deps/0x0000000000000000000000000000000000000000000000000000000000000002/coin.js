"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var coin_exports = {};
__export(coin_exports, {
  Coin: () => Coin,
  CoinMetadata: () => CoinMetadata,
  CurrencyCreated: () => CurrencyCreated,
  DenyCap: () => DenyCap,
  DenyCapV2: () => DenyCapV2,
  RegulatedCoinMetadata: () => RegulatedCoinMetadata,
  TreasuryCap: () => TreasuryCap
});
module.exports = __toCommonJS(coin_exports);
var import_bcs = require("@mysten/sui/bcs");
var balance = __toESM(require("./balance.js"));
var object = __toESM(require("./object.js"));
var url = __toESM(require("./url.js"));
function Coin() {
  return import_bcs.bcs.struct("Coin", {
    id: object.UID(),
    balance: balance.Balance()
  });
}
function CoinMetadata() {
  return import_bcs.bcs.struct("CoinMetadata", {
    id: object.UID(),
    decimals: import_bcs.bcs.u8(),
    name: import_bcs.bcs.string(),
    symbol: import_bcs.bcs.string(),
    description: import_bcs.bcs.string(),
    icon_url: import_bcs.bcs.option(url.Url())
  });
}
function RegulatedCoinMetadata() {
  return import_bcs.bcs.struct("RegulatedCoinMetadata", {
    id: object.UID(),
    coin_metadata_object: import_bcs.bcs.Address,
    deny_cap_object: import_bcs.bcs.Address
  });
}
function TreasuryCap() {
  return import_bcs.bcs.struct("TreasuryCap", {
    id: object.UID(),
    total_supply: balance.Supply()
  });
}
function DenyCapV2() {
  return import_bcs.bcs.struct("DenyCapV2", {
    id: object.UID(),
    allow_global_pause: import_bcs.bcs.bool()
  });
}
function CurrencyCreated() {
  return import_bcs.bcs.struct("CurrencyCreated", {
    decimals: import_bcs.bcs.u8()
  });
}
function DenyCap() {
  return import_bcs.bcs.struct("DenyCap", {
    id: object.UID()
  });
}
//# sourceMappingURL=coin.js.map
