"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var storage_node_exports = {};
__export(storage_node_exports, {
  StorageNodeCap: () => StorageNodeCap,
  StorageNodeInfo: () => StorageNodeInfo,
  init: () => init
});
module.exports = __toCommonJS(storage_node_exports);
var import_bcs = require("@mysten/sui/bcs");
var group_ops = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/group_ops.js"));
var object = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js"));
var event_blob = __toESM(require("./event_blob.js"));
var extended_field = __toESM(require("./extended_field.js"));
var import_utils = require("./utils/index.js");
function StorageNodeInfo() {
  return import_bcs.bcs.struct("StorageNodeInfo", {
    name: import_bcs.bcs.string(),
    node_id: import_bcs.bcs.Address,
    network_address: import_bcs.bcs.string(),
    public_key: group_ops.Element(),
    next_epoch_public_key: import_bcs.bcs.option(group_ops.Element()),
    network_public_key: import_bcs.bcs.vector(import_bcs.bcs.u8()),
    metadata: extended_field.ExtendedField()
  });
}
function StorageNodeCap() {
  return import_bcs.bcs.struct("StorageNodeCap", {
    id: object.UID(),
    node_id: import_bcs.bcs.Address,
    last_epoch_sync_done: import_bcs.bcs.u32(),
    last_event_blob_attestation: import_bcs.bcs.option(event_blob.EventBlobAttestation()),
    deny_list_root: import_bcs.bcs.u256(),
    deny_list_sequence: import_bcs.bcs.u64(),
    deny_list_size: import_bcs.bcs.u64()
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
      "vector<u8>",
      "vector<u8>",
      `${packageAddress}::node_metadata::NodeMetadata`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "new",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function new_cap(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "new_cap",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function public_key(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeInfo`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "public_key",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function metadata(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeInfo`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "metadata",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function next_epoch_public_key(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeInfo`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "next_epoch_public_key",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function id(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeInfo`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function node_id(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "node_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function last_epoch_sync_done(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "last_epoch_sync_done",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function last_event_blob_attestation(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "last_event_blob_attestation",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function deny_list_root(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "deny_list_root",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function deny_list_sequence(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "deny_list_sequence",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_last_epoch_sync_done(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeCap`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "set_last_epoch_sync_done",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_last_event_blob_attestation(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_node::StorageNodeCap`,
      `${packageAddress}::event_blob::EventBlobAttestation`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "set_last_event_blob_attestation",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_next_public_key(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeInfo`, "vector<u8>"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "set_next_public_key",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_name(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_node::StorageNodeInfo`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "set_name",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_network_address(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_node::StorageNodeInfo`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "set_network_address",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_network_public_key(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeInfo`, "vector<u8>"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "set_network_public_key",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_node_metadata(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_node::StorageNodeInfo`,
      `${packageAddress}::node_metadata::NodeMetadata`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "set_node_metadata",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function rotate_public_key(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeInfo`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "rotate_public_key",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function destroy(options) {
    const argumentsTypes = [`${packageAddress}::storage_node::StorageNodeInfo`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "destroy",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_deny_list_properties(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_node::StorageNodeCap`,
      "u256",
      "u64",
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_node",
      function: "set_deny_list_properties",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    _new,
    new_cap,
    public_key,
    metadata,
    next_epoch_public_key,
    id,
    node_id,
    last_epoch_sync_done,
    last_event_blob_attestation,
    deny_list_root,
    deny_list_sequence,
    set_last_epoch_sync_done,
    set_last_event_blob_attestation,
    set_next_public_key,
    set_name,
    set_network_address,
    set_network_public_key,
    set_node_metadata,
    rotate_public_key,
    destroy,
    set_deny_list_properties
  };
}
//# sourceMappingURL=storage_node.js.map
