import { bcs } from "@mysten/sui/bcs";
import { normalizeMoveArguments } from "./utils/index.js";
function EpochParams() {
  return bcs.struct("EpochParams", {
    total_capacity_size: bcs.u64(),
    storage_price_per_unit_size: bcs.u64(),
    write_price_per_unit_size: bcs.u64()
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = ["u64", "u64", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "epoch_parameters",
      function: "new",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function capacity(options) {
    const argumentsTypes = [`${packageAddress}::epoch_parameters::EpochParams`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "epoch_parameters",
      function: "capacity",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function storage_price(options) {
    const argumentsTypes = [`${packageAddress}::epoch_parameters::EpochParams`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "epoch_parameters",
      function: "storage_price",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function write_price(options) {
    const argumentsTypes = [`${packageAddress}::epoch_parameters::EpochParams`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "epoch_parameters",
      function: "write_price",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return { _new, capacity, storage_price, write_price };
}
export {
  EpochParams,
  init
};
//# sourceMappingURL=epoch_parameters.js.map
