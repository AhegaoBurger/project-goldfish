import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function PendingValues(): import("@mysten/sui/bcs").BcsType<{
    pos0: {
        contents: {
            key: number;
            value: string;
        }[];
    };
}, {
    pos0: {
        contents: Iterable<{
            key: number;
            value: string | number | bigint;
        }> & {
            length: number;
        };
    };
}>;
export declare function init(packageAddress: string): {
    empty: (options: {
        arguments: [];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    insert_or_add: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    insert_or_replace: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    reduce: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    value_at: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    flush: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    inner: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    inner_mut: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    unwrap: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_empty: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
