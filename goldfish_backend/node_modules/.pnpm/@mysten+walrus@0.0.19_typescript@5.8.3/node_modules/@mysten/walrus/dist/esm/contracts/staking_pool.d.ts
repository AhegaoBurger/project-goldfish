import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function VotingParams(): import("@mysten/sui/bcs").BcsType<{
    storage_price: string;
    write_price: string;
    node_capacity: string;
}, {
    storage_price: string | number | bigint;
    write_price: string | number | bigint;
    node_capacity: string | number | bigint;
}>;
export declare function StakingPool(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    state: import("@mysten/bcs").EnumOutputShapeWithKeys<{
        Active: true;
        Withdrawing: number;
        Withdrawn: true;
    }, "Active" | "Withdrawing" | "Withdrawn">;
    voting_params: {
        storage_price: string;
        write_price: string;
        node_capacity: string;
    };
    node_info: {
        name: string;
        node_id: string;
        network_address: string;
        public_key: {
            bytes: number[];
        };
        next_epoch_public_key: {
            bytes: number[];
        } | null;
        network_public_key: number[];
        metadata: {
            id: {
                id: string;
            };
        };
    };
    activation_epoch: number;
    latest_epoch: number;
    wal_balance: string;
    num_shares: string;
    pending_shares_withdraw: {
        pos0: {
            contents: {
                key: number;
                value: string;
            }[];
        };
    };
    pre_active_withdrawals: {
        pos0: {
            contents: {
                key: number;
                value: string;
            }[];
        };
    };
    pending_commission_rate: {
        pos0: {
            contents: {
                key: number;
                value: string;
            }[];
        };
    };
    commission_rate: number;
    exchange_rates: {
        id: {
            id: string;
        };
        size: string;
    };
    pending_stake: {
        pos0: {
            contents: {
                key: number;
                value: string;
            }[];
        };
    };
    rewards_pool: {
        value: string;
    };
    commission: {
        value: string;
    };
    commission_receiver: import("@mysten/bcs").EnumOutputShapeWithKeys<{
        Address: string;
        ObjectID: string;
    }, "Address" | "ObjectID">;
    governance_authorized: import("@mysten/bcs").EnumOutputShapeWithKeys<{
        Address: string;
        ObjectID: string;
    }, "Address" | "ObjectID">;
    extra_fields: {
        id: {
            id: string;
        };
        size: string;
    };
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    state: import("@mysten/bcs").EnumInputShape<{
        Active: boolean | object | null;
        Withdrawing: number;
        Withdrawn: boolean | object | null;
    }>;
    voting_params: {
        storage_price: string | number | bigint;
        write_price: string | number | bigint;
        node_capacity: string | number | bigint;
    };
    node_info: {
        name: string;
        node_id: string | Uint8Array<ArrayBufferLike>;
        network_address: string;
        public_key: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        next_epoch_public_key: {
            bytes: Iterable<number> & {
                length: number;
            };
        } | null | undefined;
        network_public_key: Iterable<number> & {
            length: number;
        };
        metadata: {
            id: {
                id: string | Uint8Array<ArrayBufferLike>;
            };
        };
    };
    activation_epoch: number;
    latest_epoch: number;
    wal_balance: string | number | bigint;
    num_shares: string | number | bigint;
    pending_shares_withdraw: {
        pos0: {
            contents: Iterable<{
                key: number;
                value: string | number | bigint;
            }> & {
                length: number;
            };
        };
    };
    pre_active_withdrawals: {
        pos0: {
            contents: Iterable<{
                key: number;
                value: string | number | bigint;
            }> & {
                length: number;
            };
        };
    };
    pending_commission_rate: {
        pos0: {
            contents: Iterable<{
                key: number;
                value: string | number | bigint;
            }> & {
                length: number;
            };
        };
    };
    commission_rate: number;
    exchange_rates: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        size: string | number | bigint;
    };
    pending_stake: {
        pos0: {
            contents: Iterable<{
                key: number;
                value: string | number | bigint;
            }> & {
                length: number;
            };
        };
    };
    rewards_pool: {
        value: string | number | bigint;
    };
    commission: {
        value: string | number | bigint;
    };
    commission_receiver: import("@mysten/bcs").EnumInputShape<{
        Address: string | Uint8Array<ArrayBufferLike>;
        ObjectID: string | Uint8Array<ArrayBufferLike>;
    }>;
    governance_authorized: import("@mysten/bcs").EnumInputShape<{
        Address: string | Uint8Array<ArrayBufferLike>;
        ObjectID: string | Uint8Array<ArrayBufferLike>;
    }>;
    extra_fields: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        size: string | number | bigint;
    };
}>;
export declare function PoolState(): import("@mysten/sui/bcs").BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Active: true;
    Withdrawing: number;
    Withdrawn: true;
}, "Active" | "Withdrawing" | "Withdrawn">, import("@mysten/bcs").EnumInputShape<{
    Active: boolean | object | null;
    Withdrawing: number;
    Withdrawn: boolean | object | null;
}>>;
export declare function init(packageAddress: string): {
    _new: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_withdrawing: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    stake: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    request_withdraw_stake: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<boolean>, RawTransactionArgument<boolean>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    withdraw_stake: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<boolean>, RawTransactionArgument<boolean>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    advance_epoch: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    process_pending_stake: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_next_commission: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_next_storage_price: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_next_write_price: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_next_node_capacity: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_next_public_key: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_name: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_network_address: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_network_public_key: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_node_metadata: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    destroy_empty: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    exchange_rate_at_epoch: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    wal_balance_at_epoch: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    governance_authorized: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_governance_authorized: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    commission_receiver: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_commission_receiver: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    commission_rate: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    commission_amount: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    collect_commission: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    rewards_amount: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    wal_balance: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    storage_price: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    write_price: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    node_capacity: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    activation_epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    node_info: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_active: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_withdrawing: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_empty: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    calculate_rewards: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
