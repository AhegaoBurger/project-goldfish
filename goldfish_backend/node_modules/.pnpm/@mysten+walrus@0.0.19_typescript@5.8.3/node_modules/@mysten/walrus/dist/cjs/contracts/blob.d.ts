import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function Blob(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    registered_epoch: number;
    blob_id: string;
    size: string;
    encoding_type: number;
    certified_epoch: number | null;
    storage: {
        id: {
            id: string;
        };
        start_epoch: number;
        end_epoch: number;
        storage_size: string;
    };
    deletable: boolean;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    registered_epoch: number;
    blob_id: string | number | bigint;
    size: string | number | bigint;
    encoding_type: number;
    certified_epoch: number | null | undefined;
    storage: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        start_epoch: number;
        end_epoch: number;
        storage_size: string | number | bigint;
    };
    deletable: boolean;
}>;
export declare function BlobIdDerivation(): import("@mysten/sui/bcs").BcsType<{
    encoding_type: number;
    size: string;
    root_hash: string;
}, {
    encoding_type: number;
    size: string | number | bigint;
    root_hash: string | number | bigint;
}>;
export declare function init(packageAddress: string): {
    object_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    registered_epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    blob_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    size: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    encoding_type: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    certified_epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    storage: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    encoded_size: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    storage_mut: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    end_epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    assert_certified_not_expired: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    derive_blob_id: (options: {
        arguments: [RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    _new: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<boolean>, RawTransactionArgument<number>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    certify_with_certified_msg: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    _delete: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    burn: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    extend_with_resource: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_certified: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<boolean>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    add_metadata: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    add_or_replace_metadata: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    take_metadata: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    metadata: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    metadata_or_create: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    insert_or_update_metadata_pair: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    remove_metadata_pair: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    remove_metadata_pair_if_exists: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
