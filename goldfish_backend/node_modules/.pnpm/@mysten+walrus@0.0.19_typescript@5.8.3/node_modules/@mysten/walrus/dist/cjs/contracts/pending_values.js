"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var pending_values_exports = {};
__export(pending_values_exports, {
  PendingValues: () => PendingValues,
  init: () => init
});
module.exports = __toCommonJS(pending_values_exports);
var import_bcs = require("@mysten/sui/bcs");
var vec_map = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_map.js"));
var import_utils = require("./utils/index.js");
function PendingValues() {
  return import_bcs.bcs.struct("PendingValues", {
    pos0: vec_map.VecMap(import_bcs.bcs.u32(), import_bcs.bcs.u64())
  });
}
function init(packageAddress) {
  function empty(options) {
    const argumentsTypes = [];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "empty",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function insert_or_add(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, "u32", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "insert_or_add",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function insert_or_replace(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, "u32", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "insert_or_replace",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function reduce(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, "u32", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "reduce",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function value_at(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "value_at",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function flush(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "flush",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function inner(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "inner",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function inner_mut(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "inner_mut",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function unwrap(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "unwrap",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function is_empty(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "is_empty",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    empty,
    insert_or_add,
    insert_or_replace,
    reduce,
    value_at,
    flush,
    inner,
    inner_mut,
    unwrap,
    is_empty
  };
}
//# sourceMappingURL=pending_values.js.map
