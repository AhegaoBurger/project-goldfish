import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js";
import { normalizeMoveArguments } from "./utils/index.js";
function WAL() {
  return bcs.struct("WAL", {
    dummy_field: bcs.bool()
  });
}
function ProtectedTreasury() {
  return bcs.struct("ProtectedTreasury", {
    id: object.UID()
  });
}
function TreasuryCapKey() {
  return bcs.struct("TreasuryCapKey", {
    dummy_field: bcs.bool()
  });
}
function init(packageAddress) {
  function init2(options) {
    const argumentsTypes = [`${packageAddress}::wal::WAL`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal",
      function: "init",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function total_supply(options) {
    const argumentsTypes = [`${packageAddress}::wal::ProtectedTreasury`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal",
      function: "total_supply",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function burn(options) {
    const argumentsTypes = [
      `${packageAddress}::wal::ProtectedTreasury`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal",
      function: "burn",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function borrow_cap(options) {
    const argumentsTypes = [`${packageAddress}::wal::ProtectedTreasury`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal",
      function: "borrow_cap",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function borrow_cap_mut(options) {
    const argumentsTypes = [`${packageAddress}::wal::ProtectedTreasury`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal",
      function: "borrow_cap_mut",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return { init: init2, total_supply, burn, borrow_cap, borrow_cap_mut };
}
export {
  ProtectedTreasury,
  TreasuryCapKey,
  WAL,
  init
};
//# sourceMappingURL=wal.js.map
