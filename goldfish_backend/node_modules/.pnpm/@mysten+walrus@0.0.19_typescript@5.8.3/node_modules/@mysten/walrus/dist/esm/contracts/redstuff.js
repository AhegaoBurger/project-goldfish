import { normalizeMoveArguments } from "./utils/index.js";
function init(packageAddress) {
  function encoded_blob_length(options) {
    const argumentsTypes = ["u64", "u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "encoded_blob_length",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function source_symbols_primary(options) {
    const argumentsTypes = ["u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "source_symbols_primary",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function source_symbols_secondary(options) {
    const argumentsTypes = ["u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "source_symbols_secondary",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function n_source_symbols(options) {
    const argumentsTypes = ["u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "n_source_symbols",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function symbol_size(options) {
    const argumentsTypes = ["u64", "u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "symbol_size",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function metadata_size(options) {
    const argumentsTypes = ["u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "metadata_size",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function max_byzantine(options) {
    const argumentsTypes = ["u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "max_byzantine",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return {
    encoded_blob_length,
    source_symbols_primary,
    source_symbols_secondary,
    n_source_symbols,
    symbol_size,
    metadata_size,
    max_byzantine
  };
}
export {
  init
};
//# sourceMappingURL=redstuff.js.map
