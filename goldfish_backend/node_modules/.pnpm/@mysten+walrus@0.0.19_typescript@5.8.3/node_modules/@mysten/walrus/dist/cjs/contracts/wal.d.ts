import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function WAL(): import("@mysten/sui/bcs").BcsType<{
    dummy_field: boolean;
}, {
    dummy_field: boolean;
}>;
export declare function ProtectedTreasury(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
}>;
export declare function TreasuryCapKey(): import("@mysten/sui/bcs").BcsType<{
    dummy_field: boolean;
}, {
    dummy_field: boolean;
}>;
export declare function init(packageAddress: string): {
    init: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    total_supply: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    burn: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    borrow_cap: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    borrow_cap_mut: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
