{
  "version": 3,
  "sources": ["../../../src/contracts/pending_values.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport * as vec_map from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_map.js';\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function PendingValues() {\n\treturn bcs.struct('PendingValues', {\n\t\tpos0: vec_map.VecMap(bcs.u32(), bcs.u64()),\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction empty(options: { arguments: [] }) {\n\t\tconst argumentsTypes: string[] = [];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'pending_values',\n\t\t\t\tfunction: 'empty',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction insert_or_add(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, 'u32', 'u64'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'pending_values',\n\t\t\t\tfunction: 'insert_or_add',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction insert_or_replace(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, 'u32', 'u64'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'pending_values',\n\t\t\t\tfunction: 'insert_or_replace',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction reduce(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, 'u32', 'u64'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'pending_values',\n\t\t\t\tfunction: 'reduce',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction value_at(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<number>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, 'u32'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'pending_values',\n\t\t\t\tfunction: 'value_at',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction flush(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<number>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, 'u32'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'pending_values',\n\t\t\t\tfunction: 'flush',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction inner(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'pending_values',\n\t\t\t\tfunction: 'inner',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction inner_mut(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'pending_values',\n\t\t\t\tfunction: 'inner_mut',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction unwrap(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'pending_values',\n\t\t\t\tfunction: 'unwrap',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction is_empty(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'pending_values',\n\t\t\t\tfunction: 'is_empty',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\treturn {\n\t\tempty,\n\t\tinsert_or_add,\n\t\tinsert_or_replace,\n\t\treduce,\n\t\tvalue_at,\n\t\tflush,\n\t\tinner,\n\t\tinner_mut,\n\t\tunwrap,\n\t\tis_empty,\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
