import { bcs } from "@mysten/sui/bcs";
import { normalizeMoveArguments } from "./utils/index.js";
function Authenticated() {
  return bcs.enum("Authenticated", {
    Sender: bcs.Address,
    Object: bcs.Address
  });
}
function Authorized() {
  return bcs.enum("Authorized", {
    Address: bcs.Address,
    ObjectID: bcs.Address
  });
}
function init(packageAddress) {
  function authenticate_sender(options) {
    const argumentsTypes = [];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "auth",
      function: "authenticate_sender",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function authenticate_with_object(options) {
    const argumentsTypes = [`${options.typeArguments[0]}`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "auth",
      function: "authenticate_with_object",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes),
      typeArguments: options.typeArguments
    });
  }
  function authorized_address(options) {
    const argumentsTypes = ["address"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "auth",
      function: "authorized_address",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function authorized_object(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "auth",
      function: "authorized_object",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function matches(options) {
    const argumentsTypes = [
      `${packageAddress}::auth::Authenticated`,
      `${packageAddress}::auth::Authorized`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "auth",
      function: "matches",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return {
    authenticate_sender,
    authenticate_with_object,
    authorized_address,
    authorized_object,
    matches
  };
}
export {
  Authenticated,
  Authorized,
  init
};
//# sourceMappingURL=auth.js.map
