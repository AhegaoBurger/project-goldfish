export declare function AuthenticatorState(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    version: string;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    version: string | number | bigint;
}>;
export declare function AuthenticatorStateInner(): import("@mysten/sui/bcs").BcsType<{
    version: string;
    active_jwks: {
        jwk_id: {
            iss: string;
            kid: string;
        };
        jwk: {
            kty: string;
            e: string;
            n: string;
            alg: string;
        };
        epoch: string;
    }[];
}, {
    version: string | number | bigint;
    active_jwks: Iterable<{
        jwk_id: {
            iss: string;
            kid: string;
        };
        jwk: {
            kty: string;
            e: string;
            n: string;
            alg: string;
        };
        epoch: string | number | bigint;
    }> & {
        length: number;
    };
}>;
export declare function JWK(): import("@mysten/sui/bcs").BcsType<{
    kty: string;
    e: string;
    n: string;
    alg: string;
}, {
    kty: string;
    e: string;
    n: string;
    alg: string;
}>;
export declare function JwkId(): import("@mysten/sui/bcs").BcsType<{
    iss: string;
    kid: string;
}, {
    iss: string;
    kid: string;
}>;
export declare function ActiveJwk(): import("@mysten/sui/bcs").BcsType<{
    jwk_id: {
        iss: string;
        kid: string;
    };
    jwk: {
        kty: string;
        e: string;
        n: string;
        alg: string;
    };
    epoch: string;
}, {
    jwk_id: {
        iss: string;
        kid: string;
    };
    jwk: {
        kty: string;
        e: string;
        n: string;
        alg: string;
    };
    epoch: string | number | bigint;
}>;
