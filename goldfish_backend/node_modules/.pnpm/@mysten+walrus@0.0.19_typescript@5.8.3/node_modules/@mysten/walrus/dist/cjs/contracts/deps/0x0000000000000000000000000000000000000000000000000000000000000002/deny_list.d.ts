export declare function DenyList(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    lists: {
        id: {
            id: string;
        };
        size: string;
    };
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    lists: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        size: string | number | bigint;
    };
}>;
export declare function ConfigWriteCap(): import("@mysten/sui/bcs").BcsType<{
    dummy_field: boolean;
}, {
    dummy_field: boolean;
}>;
export declare function ConfigKey(): import("@mysten/sui/bcs").BcsType<{
    per_type_index: string;
    per_type_key: number[];
}, {
    per_type_index: string | number | bigint;
    per_type_key: Iterable<number> & {
        length: number;
    };
}>;
export declare function AddressKey(): import("@mysten/sui/bcs").BcsType<{
    pos0: string;
}, {
    pos0: string | Uint8Array<ArrayBufferLike>;
}>;
export declare function GlobalPauseKey(): import("@mysten/sui/bcs").BcsType<{
    dummy_field: boolean;
}, {
    dummy_field: boolean;
}>;
export declare function PerTypeConfigCreated(): import("@mysten/sui/bcs").BcsType<{
    key: {
        per_type_index: string;
        per_type_key: number[];
    };
    config_id: string;
}, {
    key: {
        per_type_index: string | number | bigint;
        per_type_key: Iterable<number> & {
            length: number;
        };
    };
    config_id: string | Uint8Array<ArrayBufferLike>;
}>;
export declare function PerTypeList(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    denied_count: {
        id: {
            id: string;
        };
        size: string;
    };
    denied_addresses: {
        id: {
            id: string;
        };
        size: string;
    };
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    denied_count: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        size: string | number | bigint;
    };
    denied_addresses: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        size: string | number | bigint;
    };
}>;
