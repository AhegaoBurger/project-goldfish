import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function EventBlobAttestation(): import("@mysten/sui/bcs").BcsType<{
    checkpoint_sequence_num: string;
    epoch: number;
}, {
    checkpoint_sequence_num: string | number | bigint;
    epoch: number;
}>;
export declare function EventBlob(): import("@mysten/sui/bcs").BcsType<{
    blob_id: string;
    ending_checkpoint_sequence_number: string;
}, {
    blob_id: string | number | bigint;
    ending_checkpoint_sequence_number: string | number | bigint;
}>;
export declare function EventBlobCertificationState(): import("@mysten/sui/bcs").BcsType<{
    latest_certified_blob: {
        blob_id: string;
        ending_checkpoint_sequence_number: string;
    } | null;
    aggregate_weight_per_blob: {
        contents: {
            key: {
                blob_id: string;
                ending_checkpoint_sequence_number: string;
            };
            value: number;
        }[];
    };
}, {
    latest_certified_blob: {
        blob_id: string | number | bigint;
        ending_checkpoint_sequence_number: string | number | bigint;
    } | null | undefined;
    aggregate_weight_per_blob: {
        contents: Iterable<{
            key: {
                blob_id: string | number | bigint;
                ending_checkpoint_sequence_number: string | number | bigint;
            };
            value: number;
        }> & {
            length: number;
        };
    };
}>;
export declare function init(packageAddress: string): {
    new_attestation: (options: {
        arguments: [RawTransactionArgument<number | bigint>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    last_attested_event_blob_checkpoint_seq_num: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    last_attested_event_blob_epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    new_event_blob: (options: {
        arguments: [RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    blob_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    ending_checkpoint_sequence_number: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    create_with_empty_state: (options: {
        arguments: [];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    get_latest_certified_blob_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    get_latest_certified_checkpoint_sequence_number: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    get_num_tracked_blobs: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_blob_already_certified: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    update_latest_certified_event_blob: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    update_aggregate_weight: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    start_tracking_blob: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    reset: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
