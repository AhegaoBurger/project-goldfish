{
  "version": 3,
  "sources": ["../../../src/utils/object-loader.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType } from '@mysten/bcs';\nimport { pureBcsSchemaFromTypeName } from '@mysten/sui/bcs';\nimport type { PureTypeName, ShapeFromPureTypeName } from '@mysten/sui/bcs';\nimport type { SuiObjectData } from '@mysten/sui/client';\nimport type {\n\tExperimental_BaseClient,\n\tExperimental_SuiClientTypes,\n} from '@mysten/sui/experimental';\nimport { deriveDynamicFieldID } from '@mysten/sui/utils';\nimport DataLoader from 'dataloader';\n\nimport { Field } from '../contracts/deps/0x0000000000000000000000000000000000000000000000000000000000000002/dynamic_field.js';\n\nexport class SuiObjectDataLoader extends DataLoader<\n\tstring,\n\tExperimental_SuiClientTypes.ObjectResponse\n> {\n\t#dynamicFieldCache = new Map<string, Map<string, Experimental_SuiClientTypes.ObjectResponse>>();\n\tconstructor(suiClient: Experimental_BaseClient) {\n\t\tsuper(async (ids: readonly string[]) => {\n\t\t\tconst { objects } = await suiClient.core.getObjects({\n\t\t\t\tobjectIds: ids as string[],\n\t\t\t});\n\n\t\t\treturn objects;\n\t\t});\n\t}\n\n\toverride async load<T = SuiObjectData>(id: string, schema?: BcsType<T, any>): Promise<T> {\n\t\tconst data = await super.load(id);\n\n\t\tif (schema) {\n\t\t\treturn schema.parse(data.content);\n\t\t}\n\n\t\treturn data as T;\n\t}\n\n\toverride async loadMany<T = SuiObjectData>(\n\t\tids: string[],\n\t\tschema?: BcsType<T, any>,\n\t): Promise<(T | Error)[]> {\n\t\tconst data = await super.loadMany(ids);\n\n\t\tif (!schema) {\n\t\t\treturn data as (T | Error)[];\n\t\t}\n\n\t\treturn data.map((d) => {\n\t\t\tif (d instanceof Error) {\n\t\t\t\treturn d;\n\t\t\t}\n\n\t\t\treturn schema.parse(d.content);\n\t\t});\n\t}\n\n\tasync loadManyOrThrow<T>(ids: string[], schema: BcsType<T, any>): Promise<T[]> {\n\t\tconst data = await this.loadMany(ids, schema);\n\n\t\tfor (const d of data) {\n\t\t\tif (d instanceof Error) {\n\t\t\t\tthrow d;\n\t\t\t}\n\t\t}\n\n\t\treturn data as T[];\n\t}\n\n\toverride clearAll() {\n\t\tthis.#dynamicFieldCache.clear();\n\t\treturn super.clearAll();\n\t}\n\n\toverride clear(key: string) {\n\t\tthis.#dynamicFieldCache.delete(key);\n\t\treturn super.clear(key);\n\t}\n\n\tasync loadFieldObject<K extends PureTypeName, T>(\n\t\tparent: string,\n\t\tname: {\n\t\t\ttype: K;\n\t\t\tvalue: ShapeFromPureTypeName<K>;\n\t\t},\n\t\ttype: BcsType<T, any>,\n\t): Promise<T> {\n\t\tconst schema = pureBcsSchemaFromTypeName<K>(name.type as never);\n\t\tconst id = deriveDynamicFieldID(parent, 'u64', schema.serialize(name.value).toBytes());\n\n\t\treturn (await this.load(id, Field(schema, type))).value;\n\t}\n}\n"],
  "mappings": ";;;;;;AAAA;AAIA,SAAS,iCAAiC;AAO1C,SAAS,4BAA4B;AACrC,OAAO,gBAAgB;AAEvB,SAAS,aAAa;AAEf,MAAM,4BAA4B,WAGvC;AAAA,EAED,YAAY,WAAoC;AAC/C,UAAM,OAAO,QAA2B;AACvC,YAAM,EAAE,QAAQ,IAAI,MAAM,UAAU,KAAK,WAAW;AAAA,QACnD,WAAW;AAAA,MACZ,CAAC;AAED,aAAO;AAAA,IACR,CAAC;AARF,2CAAqB,oBAAI,IAAqE;AAAA,EAS9F;AAAA,EAEA,MAAe,KAAwB,IAAY,QAAsC;AACxF,UAAM,OAAO,MAAM,MAAM,KAAK,EAAE;AAEhC,QAAI,QAAQ;AACX,aAAO,OAAO,MAAM,KAAK,OAAO;AAAA,IACjC;AAEA,WAAO;AAAA,EACR;AAAA,EAEA,MAAe,SACd,KACA,QACyB;AACzB,UAAM,OAAO,MAAM,MAAM,SAAS,GAAG;AAErC,QAAI,CAAC,QAAQ;AACZ,aAAO;AAAA,IACR;AAEA,WAAO,KAAK,IAAI,CAAC,MAAM;AACtB,UAAI,aAAa,OAAO;AACvB,eAAO;AAAA,MACR;AAEA,aAAO,OAAO,MAAM,EAAE,OAAO;AAAA,IAC9B,CAAC;AAAA,EACF;AAAA,EAEA,MAAM,gBAAmB,KAAe,QAAuC;AAC9E,UAAM,OAAO,MAAM,KAAK,SAAS,KAAK,MAAM;AAE5C,eAAW,KAAK,MAAM;AACrB,UAAI,aAAa,OAAO;AACvB,cAAM;AAAA,MACP;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAES,WAAW;AACnB,uBAAK,oBAAmB,MAAM;AAC9B,WAAO,MAAM,SAAS;AAAA,EACvB;AAAA,EAES,MAAM,KAAa;AAC3B,uBAAK,oBAAmB,OAAO,GAAG;AAClC,WAAO,MAAM,MAAM,GAAG;AAAA,EACvB;AAAA,EAEA,MAAM,gBACL,QACA,MAIA,MACa;AACb,UAAM,SAAS,0BAA6B,KAAK,IAAa;AAC9D,UAAM,KAAK,qBAAqB,QAAQ,OAAO,OAAO,UAAU,KAAK,KAAK,EAAE,QAAQ,CAAC;AAErF,YAAQ,MAAM,KAAK,KAAK,IAAI,MAAM,QAAQ,IAAI,CAAC,GAAG;AAAA,EACnD;AACD;AA3EC;",
  "names": []
}
