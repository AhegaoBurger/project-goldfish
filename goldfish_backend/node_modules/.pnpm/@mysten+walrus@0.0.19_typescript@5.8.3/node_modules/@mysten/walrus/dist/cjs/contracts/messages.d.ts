import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function ProofOfPossessionMessage(): import("@mysten/sui/bcs").BcsType<{
    intent_type: number;
    intent_version: number;
    intent_app: number;
    epoch: number;
    sui_address: string;
    bls_key: number[];
}, {
    intent_type: number;
    intent_version: number;
    intent_app: number;
    epoch: number;
    sui_address: string | Uint8Array<ArrayBufferLike>;
    bls_key: Iterable<number> & {
        length: number;
    };
}>;
export declare function CertifiedMessage(): import("@mysten/sui/bcs").BcsType<{
    intent_type: number;
    intent_version: number;
    cert_epoch: number;
    message: number[];
    stake_support: number;
}, {
    intent_type: number;
    intent_version: number;
    cert_epoch: number;
    message: Iterable<number> & {
        length: number;
    };
    stake_support: number;
}>;
export declare function CertifiedBlobMessage(): import("@mysten/sui/bcs").BcsType<{
    blob_id: string;
    blob_persistence_type: import("@mysten/bcs").EnumOutputShapeWithKeys<{
        Permanent: true;
        Deletable: string;
    }, "Permanent" | "Deletable">;
}, {
    blob_id: string | number | bigint;
    blob_persistence_type: import("@mysten/bcs").EnumInputShape<{
        Permanent: boolean | object | null;
        Deletable: string | Uint8Array<ArrayBufferLike>;
    }>;
}>;
export declare function CertifiedInvalidBlobId(): import("@mysten/sui/bcs").BcsType<{
    blob_id: string;
}, {
    blob_id: string | number | bigint;
}>;
export declare function DenyListUpdateMessage(): import("@mysten/sui/bcs").BcsType<{
    storage_node_id: string;
    deny_list_sequence_number: string;
    deny_list_size: string;
    deny_list_root: string;
}, {
    storage_node_id: string | Uint8Array<ArrayBufferLike>;
    deny_list_sequence_number: string | number | bigint;
    deny_list_size: string | number | bigint;
    deny_list_root: string | number | bigint;
}>;
export declare function DenyListBlobDeleted(): import("@mysten/sui/bcs").BcsType<{
    blob_id: string;
}, {
    blob_id: string | number | bigint;
}>;
export declare function BlobPersistenceType(): import("@mysten/sui/bcs").BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Permanent: true;
    Deletable: string;
}, "Permanent" | "Deletable">, import("@mysten/bcs").EnumInputShape<{
    Permanent: boolean | object | null;
    Deletable: string | Uint8Array<ArrayBufferLike>;
}>>;
export declare function init(packageAddress: string): {
    new_proof_of_possession_msg: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<string>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    to_bcs: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    verify_proof_of_possession: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    new_certified_message: (options: {
        arguments: [RawTransactionArgument<number[]>, RawTransactionArgument<number>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    certify_blob_message: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    certified_event_blob_message: (options: {
        arguments: [RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    invalid_blob_id_message: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    deny_list_update_message: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    deny_list_blob_deleted_message: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    intent_type: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    intent_version: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    cert_epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    stake_support: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    message: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    into_message: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    certified_blob_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    blob_persistence_type: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    invalid_blob_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    storage_node_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    sequence_number: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    size: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    root: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    blob_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_deletable: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    object_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    peel_blob_persistence_type: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
