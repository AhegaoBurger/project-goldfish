"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var event_blob_exports = {};
__export(event_blob_exports, {
  EventBlob: () => EventBlob,
  EventBlobAttestation: () => EventBlobAttestation,
  EventBlobCertificationState: () => EventBlobCertificationState,
  init: () => init
});
module.exports = __toCommonJS(event_blob_exports);
var import_bcs = require("@mysten/sui/bcs");
var vec_map = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_map.js"));
var import_utils = require("./utils/index.js");
function EventBlobAttestation() {
  return import_bcs.bcs.struct("EventBlobAttestation", {
    checkpoint_sequence_num: import_bcs.bcs.u64(),
    epoch: import_bcs.bcs.u32()
  });
}
function EventBlob() {
  return import_bcs.bcs.struct("EventBlob", {
    blob_id: import_bcs.bcs.u256(),
    ending_checkpoint_sequence_number: import_bcs.bcs.u64()
  });
}
function EventBlobCertificationState() {
  return import_bcs.bcs.struct("EventBlobCertificationState", {
    latest_certified_blob: import_bcs.bcs.option(EventBlob()),
    aggregate_weight_per_blob: vec_map.VecMap(EventBlob(), import_bcs.bcs.u16())
  });
}
function init(packageAddress) {
  function new_attestation(options) {
    const argumentsTypes = ["u64", "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "new_attestation",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function last_attested_event_blob_checkpoint_seq_num(options) {
    const argumentsTypes = [`${packageAddress}::event_blob::EventBlobAttestation`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "last_attested_event_blob_checkpoint_seq_num",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function last_attested_event_blob_epoch(options) {
    const argumentsTypes = [`${packageAddress}::event_blob::EventBlobAttestation`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "last_attested_event_blob_epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function new_event_blob(options) {
    const argumentsTypes = ["u64", "u256"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "new_event_blob",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function blob_id(options) {
    const argumentsTypes = [`${packageAddress}::event_blob::EventBlob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "blob_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function ending_checkpoint_sequence_number(options) {
    const argumentsTypes = [`${packageAddress}::event_blob::EventBlob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "ending_checkpoint_sequence_number",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function create_with_empty_state(options) {
    const argumentsTypes = [];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "create_with_empty_state",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function get_latest_certified_blob_id(options) {
    const argumentsTypes = [`${packageAddress}::event_blob::EventBlobCertificationState`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "get_latest_certified_blob_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function get_latest_certified_checkpoint_sequence_number(options) {
    const argumentsTypes = [`${packageAddress}::event_blob::EventBlobCertificationState`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "get_latest_certified_checkpoint_sequence_number",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function get_num_tracked_blobs(options) {
    const argumentsTypes = [`${packageAddress}::event_blob::EventBlobCertificationState`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "get_num_tracked_blobs",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function is_blob_already_certified(options) {
    const argumentsTypes = [`${packageAddress}::event_blob::EventBlobCertificationState`, "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "is_blob_already_certified",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function update_latest_certified_event_blob(options) {
    const argumentsTypes = [
      `${packageAddress}::event_blob::EventBlobCertificationState`,
      "u64",
      "u256"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "update_latest_certified_event_blob",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function update_aggregate_weight(options) {
    const argumentsTypes = [
      `${packageAddress}::event_blob::EventBlobCertificationState`,
      "u256",
      "u64",
      "u16"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "update_aggregate_weight",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function start_tracking_blob(options) {
    const argumentsTypes = [
      `${packageAddress}::event_blob::EventBlobCertificationState`,
      "u256",
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "start_tracking_blob",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function reset(options) {
    const argumentsTypes = [`${packageAddress}::event_blob::EventBlobCertificationState`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "event_blob",
      function: "reset",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    new_attestation,
    last_attested_event_blob_checkpoint_seq_num,
    last_attested_event_blob_epoch,
    new_event_blob,
    blob_id,
    ending_checkpoint_sequence_number,
    create_with_empty_state,
    get_latest_certified_blob_id,
    get_latest_certified_checkpoint_sequence_number,
    get_num_tracked_blobs,
    is_blob_already_certified,
    update_latest_certified_event_blob,
    update_aggregate_weight,
    start_tracking_blob,
    reset
  };
}
//# sourceMappingURL=event_blob.js.map
