import { bcs } from "@mysten/sui/bcs";
import * as vec_map from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_map.js";
import { normalizeMoveArguments } from "./utils/index.js";
function WalrusContext() {
  return bcs.struct("WalrusContext", {
    epoch: bcs.u32(),
    committee_selected: bcs.bool(),
    committee: vec_map.VecMap(bcs.Address, bcs.vector(bcs.u16()))
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = [
      "u32",
      "bool",
      "0x0000000000000000000000000000000000000000000000000000000000000002::vec_map::VecMap<0x0000000000000000000000000000000000000000000000000000000000000002::object::ID, vector<u16>>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "walrus_context",
      function: "new",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function epoch(options) {
    const argumentsTypes = [`${packageAddress}::walrus_context::WalrusContext`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "walrus_context",
      function: "epoch",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function committee_selected(options) {
    const argumentsTypes = [`${packageAddress}::walrus_context::WalrusContext`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "walrus_context",
      function: "committee_selected",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function committee(options) {
    const argumentsTypes = [`${packageAddress}::walrus_context::WalrusContext`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "walrus_context",
      function: "committee",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return { _new, epoch, committee_selected, committee };
}
export {
  WalrusContext,
  init
};
//# sourceMappingURL=walrus_context.js.map
