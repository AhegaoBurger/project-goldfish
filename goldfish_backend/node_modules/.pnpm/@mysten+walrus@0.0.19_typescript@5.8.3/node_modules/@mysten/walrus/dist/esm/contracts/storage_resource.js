import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js";
import { normalizeMoveArguments } from "./utils/index.js";
function Storage() {
  return bcs.struct("Storage", {
    id: object.UID(),
    start_epoch: bcs.u32(),
    end_epoch: bcs.u32(),
    storage_size: bcs.u64()
  });
}
function init(packageAddress) {
  function start_epoch(options) {
    const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "start_epoch",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function end_epoch(options) {
    const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "end_epoch",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function size(options) {
    const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "size",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function create_storage(options) {
    const argumentsTypes = ["u32", "u32", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "create_storage",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function extend_end_epoch(options) {
    const argumentsTypes = [`${packageAddress}::storage_resource::Storage`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "extend_end_epoch",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function split_by_epoch(options) {
    const argumentsTypes = [`${packageAddress}::storage_resource::Storage`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "split_by_epoch",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function split_by_size(options) {
    const argumentsTypes = [`${packageAddress}::storage_resource::Storage`, "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "split_by_size",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function fuse_periods(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_resource::Storage`,
      `${packageAddress}::storage_resource::Storage`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "fuse_periods",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function fuse_amount(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_resource::Storage`,
      `${packageAddress}::storage_resource::Storage`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "fuse_amount",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function fuse(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_resource::Storage`,
      `${packageAddress}::storage_resource::Storage`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "fuse",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function destroy(options) {
    const argumentsTypes = [`${packageAddress}::storage_resource::Storage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_resource",
      function: "destroy",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return {
    start_epoch,
    end_epoch,
    size,
    create_storage,
    extend_end_epoch,
    split_by_epoch,
    split_by_size,
    fuse_periods,
    fuse_amount,
    fuse,
    destroy
  };
}
export {
  Storage,
  init
};
//# sourceMappingURL=storage_resource.js.map
