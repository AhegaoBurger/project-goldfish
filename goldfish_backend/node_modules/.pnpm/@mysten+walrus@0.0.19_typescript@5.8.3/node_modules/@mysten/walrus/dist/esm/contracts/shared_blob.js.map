{
  "version": 3,
  "sources": ["../../../src/contracts/shared_blob.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport * as blob from './blob.js';\nimport * as balance from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/balance.js';\nimport * as object from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js';\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function SharedBlob() {\n\treturn bcs.struct('SharedBlob', {\n\t\tid: object.UID(),\n\t\tblob: blob.Blob(),\n\t\tfunds: balance.Balance(),\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction _new(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::blob::Blob`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'shared_blob',\n\t\t\t\tfunction: 'new',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction new_funded(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::blob::Blob`,\n\t\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'shared_blob',\n\t\t\t\tfunction: 'new_funded',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction fund(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::shared_blob::SharedBlob`,\n\t\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'shared_blob',\n\t\t\t\tfunction: 'fund',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction extend(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::shared_blob::SharedBlob`,\n\t\t\t`${packageAddress}::system::System`,\n\t\t\t'u32',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'shared_blob',\n\t\t\t\tfunction: 'extend',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\treturn { _new, new_funded, fund, extend };\n}\n"],
  "mappings": "AAGA,SAAS,WAAW;AAGpB,YAAY,UAAU;AACtB,YAAY,aAAa;AACzB,YAAY,YAAY;AACxB,SAAS,8BAA8B;AAGhC,SAAS,aAAa;AAC5B,SAAO,IAAI,OAAO,cAAc;AAAA,IAC/B,IAAI,OAAO,IAAI;AAAA,IACf,MAAM,KAAK,KAAK;AAAA,IAChB,OAAO,QAAQ,QAAQ;AAAA,EACxB,CAAC;AACF;AACO,SAAS,KAAK,gBAAwB;AAC5C,WAAS,KAAK,SAA0D;AACvE,UAAM,iBAAiB,CAAC,GAAG,cAAc,cAAc;AACvD,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,WAAW,SAEjB;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB,kFAAkF,cAAc;AAAA,IACjG;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,KAAK,SAEX;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB,kFAAkF,cAAc;AAAA,IACjG;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,OAAO,SAMb;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB,GAAG,cAAc;AAAA,MACjB;AAAA,IACD;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,SAAO,EAAE,MAAM,YAAY,MAAM,OAAO;AACzC;",
  "names": []
}
