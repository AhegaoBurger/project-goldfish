"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var bls_aggregate_exports = {};
__export(bls_aggregate_exports, {
  BlsCommittee: () => BlsCommittee,
  BlsCommitteeMember: () => BlsCommitteeMember,
  RequiredWeight: () => RequiredWeight,
  init: () => init
});
module.exports = __toCommonJS(bls_aggregate_exports);
var import_bcs = require("@mysten/sui/bcs");
var group_ops = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/group_ops.js"));
var import_utils = require("./utils/index.js");
function BlsCommitteeMember() {
  return import_bcs.bcs.struct("BlsCommitteeMember", {
    public_key: group_ops.Element(),
    weight: import_bcs.bcs.u16(),
    node_id: import_bcs.bcs.Address
  });
}
function BlsCommittee() {
  return import_bcs.bcs.struct("BlsCommittee", {
    members: import_bcs.bcs.vector(BlsCommitteeMember()),
    n_shards: import_bcs.bcs.u16(),
    epoch: import_bcs.bcs.u32(),
    total_aggregated_key: group_ops.Element()
  });
}
function RequiredWeight() {
  return import_bcs.bcs.enum("RequiredWeight", {
    Quorum: null,
    OneCorrectNode: null
  });
}
function init(packageAddress) {
  function new_bls_committee(options) {
    const argumentsTypes = ["u32", `vector<${packageAddress}::bls_aggregate::BlsCommitteeMember>`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "new_bls_committee",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function new_bls_committee_member(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::group_ops::Element<0x0000000000000000000000000000000000000000000000000000000000000002::bls12381::UncompressedG1>",
      "u16",
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "new_bls_committee_member",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function node_id(options) {
    const argumentsTypes = [`${packageAddress}::bls_aggregate::BlsCommitteeMember`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "node_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function epoch(options) {
    const argumentsTypes = [`${packageAddress}::bls_aggregate::BlsCommittee`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function n_shards(options) {
    const argumentsTypes = [`${packageAddress}::bls_aggregate::BlsCommittee`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "n_shards",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function n_members(options) {
    const argumentsTypes = [`${packageAddress}::bls_aggregate::BlsCommittee`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "n_members",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function get_idx(options) {
    const argumentsTypes = [`${packageAddress}::bls_aggregate::BlsCommittee`, "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "get_idx",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function contains(options) {
    const argumentsTypes = [
      `${packageAddress}::bls_aggregate::BlsCommittee`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "contains",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function get_member_weight(options) {
    const argumentsTypes = [
      `${packageAddress}::bls_aggregate::BlsCommittee`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "get_member_weight",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function find_index(options) {
    const argumentsTypes = [
      `${packageAddress}::bls_aggregate::BlsCommittee`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "find_index",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function to_vec_map(options) {
    const argumentsTypes = [`${packageAddress}::bls_aggregate::BlsCommittee`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "to_vec_map",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function verify_quorum_in_epoch(options) {
    const argumentsTypes = [
      `${packageAddress}::bls_aggregate::BlsCommittee`,
      "vector<u8>",
      "vector<u8>",
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "verify_quorum_in_epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function is_quorum(options) {
    const argumentsTypes = [`${packageAddress}::bls_aggregate::BlsCommittee`, "u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "is_quorum",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function verify_one_correct_node_in_epoch(options) {
    const argumentsTypes = [
      `${packageAddress}::bls_aggregate::BlsCommittee`,
      "vector<u8>",
      "vector<u8>",
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "verify_one_correct_node_in_epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function includes_one_correct_node(options) {
    const argumentsTypes = [`${packageAddress}::bls_aggregate::BlsCommittee`, "u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "includes_one_correct_node",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function verify_certificate_and_weight(options) {
    const argumentsTypes = [
      `${packageAddress}::bls_aggregate::BlsCommittee`,
      "vector<u8>",
      "vector<u8>",
      "vector<u8>",
      `${packageAddress}::bls_aggregate::RequiredWeight`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "bls_aggregate",
      function: "verify_certificate_and_weight",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    new_bls_committee,
    new_bls_committee_member,
    node_id,
    epoch,
    n_shards,
    n_members,
    get_idx,
    contains,
    get_member_weight,
    find_index,
    to_vec_map,
    verify_quorum_in_epoch,
    is_quorum,
    verify_one_correct_node_in_epoch,
    includes_one_correct_node,
    verify_certificate_and_weight
  };
}
//# sourceMappingURL=bls_aggregate.js.map
