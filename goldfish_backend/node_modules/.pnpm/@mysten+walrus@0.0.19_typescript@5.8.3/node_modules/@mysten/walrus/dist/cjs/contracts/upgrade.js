"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var upgrade_exports = {};
__export(upgrade_exports, {
  EmergencyUpgradeCap: () => EmergencyUpgradeCap,
  PackageDigest: () => PackageDigest,
  UpgradeManager: () => UpgradeManager,
  UpgradeProposal: () => UpgradeProposal,
  init: () => init
});
module.exports = __toCommonJS(upgrade_exports);
var import_bcs = require("@mysten/sui/bcs");
var object = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js"));
var _package = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/package.js"));
var table = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/table.js"));
var vec_set = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_set.js"));
var import_utils = require("./utils/index.js");
function PackageDigest() {
  return import_bcs.bcs.struct("PackageDigest", {
    pos0: import_bcs.bcs.vector(import_bcs.bcs.u8())
  });
}
function UpgradeProposal() {
  return import_bcs.bcs.struct("UpgradeProposal", {
    epoch: import_bcs.bcs.u32(),
    digest: PackageDigest(),
    version: import_bcs.bcs.u64(),
    voting_weight: import_bcs.bcs.u16(),
    voters: vec_set.VecSet(import_bcs.bcs.Address)
  });
}
function UpgradeManager() {
  return import_bcs.bcs.struct("UpgradeManager", {
    id: object.UID(),
    cap: _package.UpgradeCap(),
    upgrade_proposals: table.Table()
  });
}
function EmergencyUpgradeCap() {
  return import_bcs.bcs.struct("EmergencyUpgradeCap", {
    id: object.UID(),
    upgrade_manager_id: import_bcs.bcs.Address
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::package::UpgradeCap"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "upgrade",
      function: "new",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function vote_for_upgrade(options) {
    const argumentsTypes = [
      `${packageAddress}::upgrade::UpgradeManager`,
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::auth::Authenticated`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "upgrade",
      function: "vote_for_upgrade",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function authorize_upgrade(options) {
    const argumentsTypes = [
      `${packageAddress}::upgrade::UpgradeManager`,
      `${packageAddress}::staking::Staking`,
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "upgrade",
      function: "authorize_upgrade",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function authorize_emergency_upgrade(options) {
    const argumentsTypes = [
      `${packageAddress}::upgrade::UpgradeManager`,
      `${packageAddress}::upgrade::EmergencyUpgradeCap`,
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "upgrade",
      function: "authorize_emergency_upgrade",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function commit_upgrade(options) {
    const argumentsTypes = [
      `${packageAddress}::upgrade::UpgradeManager`,
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::system::System`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::package::UpgradeReceipt"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "upgrade",
      function: "commit_upgrade",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function cleanup_upgrade_proposals(options) {
    const argumentsTypes = [
      `${packageAddress}::upgrade::UpgradeManager`,
      `${packageAddress}::staking::Staking`,
      "vector<vector<u8>>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "upgrade",
      function: "cleanup_upgrade_proposals",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function burn_emergency_upgrade_cap(options) {
    const argumentsTypes = [`${packageAddress}::upgrade::EmergencyUpgradeCap`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "upgrade",
      function: "burn_emergency_upgrade_cap",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function fresh_proposal(options) {
    const argumentsTypes = ["u32", `${packageAddress}::upgrade::PackageDigest`, "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "upgrade",
      function: "fresh_proposal",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function add_vote(options) {
    const argumentsTypes = [
      `${packageAddress}::upgrade::UpgradeProposal`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      "u16"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "upgrade",
      function: "add_vote",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    _new,
    vote_for_upgrade,
    authorize_upgrade,
    authorize_emergency_upgrade,
    commit_upgrade,
    cleanup_upgrade_proposals,
    burn_emergency_upgrade_cap,
    fresh_proposal,
    add_vote
  };
}
//# sourceMappingURL=upgrade.js.map
