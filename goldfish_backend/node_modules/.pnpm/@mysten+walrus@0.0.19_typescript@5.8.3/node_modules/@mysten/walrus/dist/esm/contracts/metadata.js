import { bcs } from "@mysten/sui/bcs";
import * as vec_map from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_map.js";
import { normalizeMoveArguments } from "./utils/index.js";
function Metadata() {
  return bcs.struct("Metadata", {
    metadata: vec_map.VecMap(bcs.string(), bcs.string())
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = [];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "metadata",
      function: "new",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function insert_or_update(options) {
    const argumentsTypes = [
      `${packageAddress}::metadata::Metadata`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "metadata",
      function: "insert_or_update",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function remove(options) {
    const argumentsTypes = [
      `${packageAddress}::metadata::Metadata`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "metadata",
      function: "remove",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function remove_if_exists(options) {
    const argumentsTypes = [
      `${packageAddress}::metadata::Metadata`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "metadata",
      function: "remove_if_exists",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return { _new, insert_or_update, remove, remove_if_exists };
}
export {
  Metadata,
  init
};
//# sourceMappingURL=metadata.js.map
