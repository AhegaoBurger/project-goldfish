import { bcs } from "@mysten/sui/bcs";
import * as object_bag from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object_bag.js";
import * as object from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js";
import { normalizeMoveArguments } from "./utils/index.js";
function ObjectDisplay() {
  return bcs.struct("ObjectDisplay", {
    id: object.UID(),
    inner: object_bag.ObjectBag()
  });
}
function PublisherKey() {
  return bcs.struct("PublisherKey", {
    dummy_field: bcs.bool()
  });
}
function init(packageAddress) {
  function create(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::package::Publisher"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "display",
      function: "create",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function init_blob_display(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::package::Publisher"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "display",
      function: "init_blob_display",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function init_storage_display(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::package::Publisher"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "display",
      function: "init_storage_display",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function init_staked_wal_display(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::package::Publisher"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "display",
      function: "init_staked_wal_display",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return { create, init_blob_display, init_storage_display, init_staked_wal_display };
}
export {
  ObjectDisplay,
  PublisherKey,
  init
};
//# sourceMappingURL=display.js.map
