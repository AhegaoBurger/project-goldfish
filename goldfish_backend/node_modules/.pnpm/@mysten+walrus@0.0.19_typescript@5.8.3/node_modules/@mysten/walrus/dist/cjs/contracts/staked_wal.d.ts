import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function StakedWal(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    state: import("@mysten/bcs").EnumOutputShapeWithKeys<{
        Staked: true;
        Withdrawing: number;
    }, "Withdrawing" | "Staked">;
    node_id: string;
    principal: {
        value: string;
    };
    activation_epoch: number;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    state: import("@mysten/bcs").EnumInputShape<{
        Staked: boolean | object | null;
        Withdrawing: number;
    }>;
    node_id: string | Uint8Array<ArrayBufferLike>;
    principal: {
        value: string | number | bigint;
    };
    activation_epoch: number;
}>;
export declare function StakedWalState(): import("@mysten/sui/bcs").BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Staked: true;
    Withdrawing: number;
}, "Withdrawing" | "Staked">, import("@mysten/bcs").EnumInputShape<{
    Staked: boolean | object | null;
    Withdrawing: number;
}>>;
export declare function init(packageAddress: string): {
    mint: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    into_balance: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_withdrawing: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    can_withdraw_early: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<boolean>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    node_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    value: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    activation_epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_staked: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_withdrawing: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    withdraw_epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    join: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    split: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
