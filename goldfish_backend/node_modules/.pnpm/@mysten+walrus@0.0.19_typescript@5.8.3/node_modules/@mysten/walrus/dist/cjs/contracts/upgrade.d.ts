import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function PackageDigest(): import("@mysten/sui/bcs").BcsType<{
    pos0: number[];
}, {
    pos0: Iterable<number> & {
        length: number;
    };
}>;
export declare function UpgradeProposal(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    digest: {
        pos0: number[];
    };
    version: string;
    voting_weight: number;
    voters: {
        contents: any[];
    };
}, {
    epoch: number;
    digest: {
        pos0: Iterable<number> & {
            length: number;
        };
    };
    version: string | number | bigint;
    voting_weight: number;
    voters: {
        contents: Iterable<any> & {
            length: number;
        };
    };
}>;
export declare function UpgradeManager(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    cap: {
        id: {
            id: string;
        };
        package: string;
        version: string;
        policy: number;
    };
    upgrade_proposals: {
        id: {
            id: string;
        };
        size: string;
    };
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    cap: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        package: string | Uint8Array<ArrayBufferLike>;
        version: string | number | bigint;
        policy: number;
    };
    upgrade_proposals: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        size: string | number | bigint;
    };
}>;
export declare function EmergencyUpgradeCap(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    upgrade_manager_id: string;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    upgrade_manager_id: string | Uint8Array<ArrayBufferLike>;
}>;
export declare function init(packageAddress: string): {
    _new: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    vote_for_upgrade: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    authorize_upgrade: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    authorize_emergency_upgrade: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    commit_upgrade: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    cleanup_upgrade_proposals: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[][]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    burn_emergency_upgrade_cap: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    fresh_proposal: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    add_vote: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
