import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function BlobRegistered(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    blob_id: string;
    size: string;
    encoding_type: number;
    end_epoch: number;
    deletable: boolean;
    object_id: string;
}, {
    epoch: number;
    blob_id: string | number | bigint;
    size: string | number | bigint;
    encoding_type: number;
    end_epoch: number;
    deletable: boolean;
    object_id: string | Uint8Array<ArrayBufferLike>;
}>;
export declare function BlobCertified(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    blob_id: string;
    end_epoch: number;
    deletable: boolean;
    object_id: string;
    is_extension: boolean;
}, {
    epoch: number;
    blob_id: string | number | bigint;
    end_epoch: number;
    deletable: boolean;
    object_id: string | Uint8Array<ArrayBufferLike>;
    is_extension: boolean;
}>;
export declare function BlobDeleted(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    blob_id: string;
    end_epoch: number;
    object_id: string;
    was_certified: boolean;
}, {
    epoch: number;
    blob_id: string | number | bigint;
    end_epoch: number;
    object_id: string | Uint8Array<ArrayBufferLike>;
    was_certified: boolean;
}>;
export declare function InvalidBlobID(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    blob_id: string;
}, {
    epoch: number;
    blob_id: string | number | bigint;
}>;
export declare function EpochChangeStart(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
}, {
    epoch: number;
}>;
export declare function EpochChangeDone(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
}, {
    epoch: number;
}>;
export declare function ShardsReceived(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    shards: number[];
}, {
    epoch: number;
    shards: Iterable<number> & {
        length: number;
    };
}>;
export declare function EpochParametersSelected(): import("@mysten/sui/bcs").BcsType<{
    next_epoch: number;
}, {
    next_epoch: number;
}>;
export declare function ShardRecoveryStart(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    shards: number[];
}, {
    epoch: number;
    shards: Iterable<number> & {
        length: number;
    };
}>;
export declare function ContractUpgraded(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    package_id: string;
    version: string;
}, {
    epoch: number;
    package_id: string | Uint8Array<ArrayBufferLike>;
    version: string | number | bigint;
}>;
export declare function RegisterDenyListUpdate(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    root: string;
    sequence_number: string;
    node_id: string;
}, {
    epoch: number;
    root: string | number | bigint;
    sequence_number: string | number | bigint;
    node_id: string | Uint8Array<ArrayBufferLike>;
}>;
export declare function DenyListUpdate(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    root: string;
    sequence_number: string;
    node_id: string;
}, {
    epoch: number;
    root: string | number | bigint;
    sequence_number: string | number | bigint;
    node_id: string | Uint8Array<ArrayBufferLike>;
}>;
export declare function DenyListBlobDeleted(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    blob_id: string;
}, {
    epoch: number;
    blob_id: string | number | bigint;
}>;
export declare function ContractUpgradeProposed(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    package_digest: number[];
}, {
    epoch: number;
    package_digest: Iterable<number> & {
        length: number;
    };
}>;
export declare function ContractUpgradeQuorumReached(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    package_digest: number[];
}, {
    epoch: number;
    package_digest: Iterable<number> & {
        length: number;
    };
}>;
export declare function init(packageAddress: string): {
    emit_blob_registered: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<number>, RawTransactionArgument<boolean>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_blob_certified: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<boolean>, RawTransactionArgument<string>, RawTransactionArgument<boolean>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_invalid_blob_id: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_blob_deleted: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<string>, RawTransactionArgument<boolean>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_epoch_change_start: (options: {
        arguments: [RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_epoch_change_done: (options: {
        arguments: [RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_shards_received: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_epoch_parameters_selected: (options: {
        arguments: [RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_shard_recovery_start: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_contract_upgraded: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_register_deny_list_update: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_deny_list_update: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_deny_listed_blob_deleted: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_contract_upgrade_proposed: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    emit_contract_upgrade_quorum_reached: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
