import { bcs } from "@mysten/sui/bcs";
import * as balance from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/balance.js";
import * as object from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js";
import { normalizeMoveArguments } from "./utils/index.js";
function AdminCap() {
  return bcs.struct("AdminCap", {
    id: object.UID(),
    subsidies_id: bcs.Address
  });
}
function Subsidies() {
  return bcs.struct("Subsidies", {
    id: object.UID(),
    buyer_subsidy_rate: bcs.u16(),
    system_subsidy_rate: bcs.u16(),
    subsidy_pool: balance.Balance(),
    package_id: bcs.Address,
    version: bcs.u64()
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "new",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function new_with_initial_rates_and_funds(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      "u16",
      "u16",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "new_with_initial_rates_and_funds",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function add_funds(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "add_funds",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function check_admin(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::subsidies::AdminCap`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "check_admin",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function check_version_upgrade(options) {
    const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "check_version_upgrade",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function set_buyer_subsidy_rate(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::subsidies::AdminCap`,
      "u16"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "set_buyer_subsidy_rate",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function set_system_subsidy_rate(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::subsidies::AdminCap`,
      "u16"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "set_system_subsidy_rate",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function apply_subsidies(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      "u64",
      "u32",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
      `${packageAddress}::system::System`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "apply_subsidies",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function extend_blob(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::system::System`,
      `${packageAddress}::blob::Blob`,
      "u32",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "extend_blob",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function reserve_space(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::system::System`,
      "u64",
      "u32",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "reserve_space",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function migrate(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::subsidies::AdminCap`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "migrate",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function admin_cap_subsidies_id(options) {
    const argumentsTypes = [`${packageAddress}::subsidies::AdminCap`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "admin_cap_subsidies_id",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function subsidy_pool_value(options) {
    const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "subsidy_pool_value",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function buyer_subsidy_rate(options) {
    const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "buyer_subsidy_rate",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function system_subsidy_rate(options) {
    const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "system_subsidy_rate",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return {
    _new,
    new_with_initial_rates_and_funds,
    add_funds,
    check_admin,
    check_version_upgrade,
    set_buyer_subsidy_rate,
    set_system_subsidy_rate,
    apply_subsidies,
    extend_blob,
    reserve_space,
    migrate,
    admin_cap_subsidies_id,
    subsidy_pool_value,
    buyer_subsidy_rate,
    system_subsidy_rate
  };
}
export {
  AdminCap,
  Subsidies,
  init
};
//# sourceMappingURL=subsidies.js.map
