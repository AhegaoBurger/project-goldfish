"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var blob_exports = {};
__export(blob_exports, {
  Blob: () => Blob,
  BlobIdDerivation: () => BlobIdDerivation,
  init: () => init
});
module.exports = __toCommonJS(blob_exports);
var import_bcs = require("@mysten/sui/bcs");
var object = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js"));
var storage_resource = __toESM(require("./storage_resource.js"));
var import_utils = require("./utils/index.js");
function Blob() {
  return import_bcs.bcs.struct("Blob", {
    id: object.UID(),
    registered_epoch: import_bcs.bcs.u32(),
    blob_id: import_bcs.bcs.u256(),
    size: import_bcs.bcs.u64(),
    encoding_type: import_bcs.bcs.u8(),
    certified_epoch: import_bcs.bcs.option(import_bcs.bcs.u32()),
    storage: storage_resource.Storage(),
    deletable: import_bcs.bcs.bool()
  });
}
function BlobIdDerivation() {
  return import_bcs.bcs.struct("BlobIdDerivation", {
    encoding_type: import_bcs.bcs.u8(),
    size: import_bcs.bcs.u64(),
    root_hash: import_bcs.bcs.u256()
  });
}
function init(packageAddress) {
  function object_id(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "object_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function registered_epoch(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "registered_epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function blob_id(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "blob_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function size(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "size",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function encoding_type(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "encoding_type",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function certified_epoch(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "certified_epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function storage(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "storage",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function encoded_size(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`, "u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "encoded_size",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function storage_mut(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "storage_mut",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function end_epoch(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "end_epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function assert_certified_not_expired(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "assert_certified_not_expired",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function derive_blob_id(options) {
    const argumentsTypes = ["u256", "u8", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "derive_blob_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function _new(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_resource::Storage`,
      "u256",
      "u256",
      "u64",
      "u8",
      "bool",
      "u32",
      "u16"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "new",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function certify_with_certified_msg(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      "u32",
      `${packageAddress}::messages::CertifiedBlobMessage`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "certify_with_certified_msg",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function _delete(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "delete",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function burn(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "burn",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function extend_with_resource(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      `${packageAddress}::storage_resource::Storage`,
      "u32"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "extend_with_resource",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function emit_certified(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`, "bool"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "emit_certified",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function add_metadata(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      `${packageAddress}::metadata::Metadata`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "add_metadata",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function add_or_replace_metadata(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      `${packageAddress}::metadata::Metadata`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "add_or_replace_metadata",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function take_metadata(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "take_metadata",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function metadata(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "metadata",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function metadata_or_create(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "metadata_or_create",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function insert_or_update_metadata_pair(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "insert_or_update_metadata_pair",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function remove_metadata_pair(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "remove_metadata_pair",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function remove_metadata_pair_if_exists(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "remove_metadata_pair_if_exists",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    object_id,
    registered_epoch,
    blob_id,
    size,
    encoding_type,
    certified_epoch,
    storage,
    encoded_size,
    storage_mut,
    end_epoch,
    assert_certified_not_expired,
    derive_blob_id,
    _new,
    certify_with_certified_msg,
    _delete,
    burn,
    extend_with_resource,
    emit_certified,
    add_metadata,
    add_or_replace_metadata,
    take_metadata,
    metadata,
    metadata_or_create,
    insert_or_update_metadata_pair,
    remove_metadata_pair,
    remove_metadata_pair_if_exists
  };
}
//# sourceMappingURL=blob.js.map
