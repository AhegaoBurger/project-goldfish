"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var subsidies_exports = {};
__export(subsidies_exports, {
  AdminCap: () => AdminCap,
  Subsidies: () => Subsidies,
  init: () => init
});
module.exports = __toCommonJS(subsidies_exports);
var import_bcs = require("@mysten/sui/bcs");
var balance = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/balance.js"));
var object = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js"));
var import_utils = require("./utils/index.js");
function AdminCap() {
  return import_bcs.bcs.struct("AdminCap", {
    id: object.UID(),
    subsidies_id: import_bcs.bcs.Address
  });
}
function Subsidies() {
  return import_bcs.bcs.struct("Subsidies", {
    id: object.UID(),
    buyer_subsidy_rate: import_bcs.bcs.u16(),
    system_subsidy_rate: import_bcs.bcs.u16(),
    subsidy_pool: balance.Balance(),
    package_id: import_bcs.bcs.Address,
    version: import_bcs.bcs.u64()
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "new",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function new_with_initial_rates_and_funds(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      "u16",
      "u16",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "new_with_initial_rates_and_funds",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function add_funds(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "add_funds",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function check_admin(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::subsidies::AdminCap`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "check_admin",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function check_version_upgrade(options) {
    const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "check_version_upgrade",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_buyer_subsidy_rate(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::subsidies::AdminCap`,
      "u16"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "set_buyer_subsidy_rate",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_system_subsidy_rate(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::subsidies::AdminCap`,
      "u16"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "set_system_subsidy_rate",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function apply_subsidies(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      "u64",
      "u32",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
      `${packageAddress}::system::System`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "apply_subsidies",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function extend_blob(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::system::System`,
      `${packageAddress}::blob::Blob`,
      "u32",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "extend_blob",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function reserve_space(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::system::System`,
      "u64",
      "u32",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "reserve_space",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function migrate(options) {
    const argumentsTypes = [
      `${packageAddress}::subsidies::Subsidies`,
      `${packageAddress}::subsidies::AdminCap`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "migrate",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function admin_cap_subsidies_id(options) {
    const argumentsTypes = [`${packageAddress}::subsidies::AdminCap`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "admin_cap_subsidies_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function subsidy_pool_value(options) {
    const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "subsidy_pool_value",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function buyer_subsidy_rate(options) {
    const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "buyer_subsidy_rate",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function system_subsidy_rate(options) {
    const argumentsTypes = [`${packageAddress}::subsidies::Subsidies`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "subsidies",
      function: "system_subsidy_rate",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    _new,
    new_with_initial_rates_and_funds,
    add_funds,
    check_admin,
    check_version_upgrade,
    set_buyer_subsidy_rate,
    set_system_subsidy_rate,
    apply_subsidies,
    extend_blob,
    reserve_space,
    migrate,
    admin_cap_subsidies_id,
    subsidy_pool_value,
    buyer_subsidy_rate,
    system_subsidy_rate
  };
}
//# sourceMappingURL=subsidies.js.map
