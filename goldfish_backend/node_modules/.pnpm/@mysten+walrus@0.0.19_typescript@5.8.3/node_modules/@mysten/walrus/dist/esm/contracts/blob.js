import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js";
import * as storage_resource from "./storage_resource.js";
import { normalizeMoveArguments } from "./utils/index.js";
function Blob() {
  return bcs.struct("Blob", {
    id: object.UID(),
    registered_epoch: bcs.u32(),
    blob_id: bcs.u256(),
    size: bcs.u64(),
    encoding_type: bcs.u8(),
    certified_epoch: bcs.option(bcs.u32()),
    storage: storage_resource.Storage(),
    deletable: bcs.bool()
  });
}
function BlobIdDerivation() {
  return bcs.struct("BlobIdDerivation", {
    encoding_type: bcs.u8(),
    size: bcs.u64(),
    root_hash: bcs.u256()
  });
}
function init(packageAddress) {
  function object_id(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "object_id",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function registered_epoch(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "registered_epoch",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function blob_id(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "blob_id",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function size(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "size",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function encoding_type(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "encoding_type",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function certified_epoch(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "certified_epoch",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function storage(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "storage",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function encoded_size(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`, "u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "encoded_size",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function storage_mut(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "storage_mut",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function end_epoch(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "end_epoch",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function assert_certified_not_expired(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "assert_certified_not_expired",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function derive_blob_id(options) {
    const argumentsTypes = ["u256", "u8", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "derive_blob_id",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function _new(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_resource::Storage`,
      "u256",
      "u256",
      "u64",
      "u8",
      "bool",
      "u32",
      "u16"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "new",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function certify_with_certified_msg(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      "u32",
      `${packageAddress}::messages::CertifiedBlobMessage`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "certify_with_certified_msg",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function _delete(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "delete",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function burn(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "burn",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function extend_with_resource(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      `${packageAddress}::storage_resource::Storage`,
      "u32"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "extend_with_resource",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function emit_certified(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`, "bool"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "emit_certified",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function add_metadata(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      `${packageAddress}::metadata::Metadata`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "add_metadata",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function add_or_replace_metadata(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      `${packageAddress}::metadata::Metadata`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "add_or_replace_metadata",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function take_metadata(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "take_metadata",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function metadata(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "metadata",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function metadata_or_create(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "metadata_or_create",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function insert_or_update_metadata_pair(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "insert_or_update_metadata_pair",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function remove_metadata_pair(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "remove_metadata_pair",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function remove_metadata_pair_if_exists(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "blob",
      function: "remove_metadata_pair_if_exists",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return {
    object_id,
    registered_epoch,
    blob_id,
    size,
    encoding_type,
    certified_epoch,
    storage,
    encoded_size,
    storage_mut,
    end_epoch,
    assert_certified_not_expired,
    derive_blob_id,
    _new,
    certify_with_certified_msg,
    _delete,
    burn,
    extend_with_resource,
    emit_certified,
    add_metadata,
    add_or_replace_metadata,
    take_metadata,
    metadata,
    metadata_or_create,
    insert_or_update_metadata_pair,
    remove_metadata_pair,
    remove_metadata_pair_if_exists
  };
}
export {
  Blob,
  BlobIdDerivation,
  init
};
//# sourceMappingURL=blob.js.map
