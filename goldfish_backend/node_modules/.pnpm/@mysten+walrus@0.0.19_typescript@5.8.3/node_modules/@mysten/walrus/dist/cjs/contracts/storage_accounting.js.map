{
  "version": 3,
  "sources": ["../../../src/contracts/storage_accounting.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport * as balance from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/balance.js';\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function FutureAccounting() {\n\treturn bcs.struct('FutureAccounting', {\n\t\tepoch: bcs.u32(),\n\t\tused_capacity: bcs.u64(),\n\t\trewards_to_distribute: balance.Balance(),\n\t});\n}\nexport function FutureAccountingRingBuffer() {\n\treturn bcs.struct('FutureAccountingRingBuffer', {\n\t\tcurrent_index: bcs.u32(),\n\t\tlength: bcs.u32(),\n\t\tring_buffer: bcs.vector(FutureAccounting()),\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction new_future_accounting(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<number>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t\tRawTransactionArgument<string>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t'u32',\n\t\t\t'u64',\n\t\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::balance::Balance<${packageAddress}::wal::WAL>`,\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'new_future_accounting',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction epoch(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'epoch',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction used_capacity(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'used_capacity',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction increase_used_capacity(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`, 'u64'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'increase_used_capacity',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction rewards_balance(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'rewards_balance',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction delete_empty_future_accounting(options: {\n\t\targuments: [RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'delete_empty_future_accounting',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction unwrap_balance(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'unwrap_balance',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction ring_new(options: { arguments: [RawTransactionArgument<number>] }) {\n\t\tconst argumentsTypes = ['u32'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'ring_new',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction ring_lookup_mut(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<number>];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::storage_accounting::FutureAccountingRingBuffer`,\n\t\t\t'u32',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'ring_lookup_mut',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction ring_pop_expand(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccountingRingBuffer`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'ring_pop_expand',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction max_epochs_ahead(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccountingRingBuffer`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'storage_accounting',\n\t\t\t\tfunction: 'max_epochs_ahead',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\treturn {\n\t\tnew_future_accounting,\n\t\tepoch,\n\t\tused_capacity,\n\t\tincrease_used_capacity,\n\t\trewards_balance,\n\t\tdelete_empty_future_accounting,\n\t\tunwrap_balance,\n\t\tring_new,\n\t\tring_lookup_mut,\n\t\tring_pop_expand,\n\t\tmax_epochs_ahead,\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
