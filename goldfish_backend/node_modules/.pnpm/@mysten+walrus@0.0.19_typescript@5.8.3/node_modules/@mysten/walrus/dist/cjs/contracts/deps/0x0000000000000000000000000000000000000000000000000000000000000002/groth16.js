"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var groth16_exports = {};
__export(groth16_exports, {
  Curve: () => Curve,
  PreparedVerifyingKey: () => PreparedVerifyingKey,
  ProofPoints: () => ProofPoints,
  PublicProofInputs: () => PublicProofInputs
});
module.exports = __toCommonJS(groth16_exports);
var import_bcs = require("@mysten/sui/bcs");
function Curve() {
  return import_bcs.bcs.struct("Curve", {
    id: import_bcs.bcs.u8()
  });
}
function PreparedVerifyingKey() {
  return import_bcs.bcs.struct("PreparedVerifyingKey", {
    vk_gamma_abc_g1_bytes: import_bcs.bcs.vector(import_bcs.bcs.u8()),
    alpha_g1_beta_g2_bytes: import_bcs.bcs.vector(import_bcs.bcs.u8()),
    gamma_g2_neg_pc_bytes: import_bcs.bcs.vector(import_bcs.bcs.u8()),
    delta_g2_neg_pc_bytes: import_bcs.bcs.vector(import_bcs.bcs.u8())
  });
}
function PublicProofInputs() {
  return import_bcs.bcs.struct("PublicProofInputs", {
    bytes: import_bcs.bcs.vector(import_bcs.bcs.u8())
  });
}
function ProofPoints() {
  return import_bcs.bcs.struct("ProofPoints", {
    bytes: import_bcs.bcs.vector(import_bcs.bcs.u8())
  });
}
//# sourceMappingURL=groth16.js.map
