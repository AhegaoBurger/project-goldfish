import type { BcsType } from '@mysten/sui/bcs';
export declare function VecMap<T0 extends BcsType<any>, T1 extends BcsType<any>>(...typeParameters: [T0, T1]): BcsType<{
    contents: {
        key: T0 extends BcsType<infer U, any> ? U : never;
        value: T1 extends BcsType<infer U, any> ? U : never;
    }[];
}, {
    contents: Iterable<{
        key: T0 extends BcsType<any, infer U_1> ? U_1 : never;
        value: T1 extends BcsType<any, infer U_1> ? U_1 : never;
    }> & {
        length: number;
    };
}>;
export declare function Entry<T0 extends BcsType<any>, T1 extends BcsType<any>>(...typeParameters: [T0, T1]): BcsType<{
    key: T0 extends BcsType<infer U, any> ? U : never;
    value: T1 extends BcsType<infer U, any> ? U : never;
}, {
    key: T0 extends BcsType<any, infer U_1> ? U_1 : never;
    value: T1 extends BcsType<any, infer U_1> ? U_1 : never;
}>;
