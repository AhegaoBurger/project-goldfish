import { bcs } from "@mysten/sui/bcs";
import { normalizeMoveArguments } from "./utils/index.js";
function PoolExchangeRate() {
  return bcs.enum("PoolExchangeRate", {
    Flat: null,
    Variable: bcs.tuple([bcs.u128(), bcs.u128()])
  });
}
function init(packageAddress) {
  function flat(options) {
    const argumentsTypes = [];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pool_exchange_rate",
      function: "flat",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function _new(options) {
    const argumentsTypes = ["u64", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pool_exchange_rate",
      function: "new",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function convert_to_wal_amount(options) {
    const argumentsTypes = [`${packageAddress}::pool_exchange_rate::PoolExchangeRate`, "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pool_exchange_rate",
      function: "convert_to_wal_amount",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function convert_to_share_amount(options) {
    const argumentsTypes = [`${packageAddress}::pool_exchange_rate::PoolExchangeRate`, "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pool_exchange_rate",
      function: "convert_to_share_amount",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return { flat, _new, convert_to_wal_amount, convert_to_share_amount };
}
export {
  PoolExchangeRate,
  init
};
//# sourceMappingURL=pool_exchange_rate.js.map
