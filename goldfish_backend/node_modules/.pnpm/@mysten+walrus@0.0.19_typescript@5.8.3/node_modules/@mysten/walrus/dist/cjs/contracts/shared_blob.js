"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var shared_blob_exports = {};
__export(shared_blob_exports, {
  SharedBlob: () => SharedBlob,
  init: () => init
});
module.exports = __toCommonJS(shared_blob_exports);
var import_bcs = require("@mysten/sui/bcs");
var blob = __toESM(require("./blob.js"));
var balance = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/balance.js"));
var object = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js"));
var import_utils = require("./utils/index.js");
function SharedBlob() {
  return import_bcs.bcs.struct("SharedBlob", {
    id: object.UID(),
    blob: blob.Blob(),
    funds: balance.Balance()
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "shared_blob",
      function: "new",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function new_funded(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "shared_blob",
      function: "new_funded",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function fund(options) {
    const argumentsTypes = [
      `${packageAddress}::shared_blob::SharedBlob`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "shared_blob",
      function: "fund",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function extend(options) {
    const argumentsTypes = [
      `${packageAddress}::shared_blob::SharedBlob`,
      `${packageAddress}::system::System`,
      "u32"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "shared_blob",
      function: "extend",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return { _new, new_funded, fund, extend };
}
//# sourceMappingURL=shared_blob.js.map
