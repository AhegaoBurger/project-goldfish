import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function Metadata(): import("@mysten/sui/bcs").BcsType<{
    metadata: {
        contents: {
            key: string;
            value: string;
        }[];
    };
}, {
    metadata: {
        contents: Iterable<{
            key: string;
            value: string;
        }> & {
            length: number;
        };
    };
}>;
export declare function init(packageAddress: string): {
    _new: (options: {
        arguments: [];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    insert_or_update: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    remove: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    remove_if_exists: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
