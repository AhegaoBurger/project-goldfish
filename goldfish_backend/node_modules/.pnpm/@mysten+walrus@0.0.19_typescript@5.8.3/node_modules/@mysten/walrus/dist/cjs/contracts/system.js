"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var system_exports = {};
__export(system_exports, {
  System: () => System,
  init: () => init
});
module.exports = __toCommonJS(system_exports);
var import_bcs = require("@mysten/sui/bcs");
var object = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js"));
var import_utils = require("./utils/index.js");
function System() {
  return import_bcs.bcs.struct("System", {
    id: object.UID(),
    version: import_bcs.bcs.u64(),
    package_id: import_bcs.bcs.Address,
    new_package_id: import_bcs.bcs.option(import_bcs.bcs.Address)
  });
}
function init(packageAddress) {
  function create_empty(options) {
    const argumentsTypes = [
      "u32",
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "create_empty",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function invalidate_blob_id(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      "vector<u8>",
      "vector<u8>",
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "invalidate_blob_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function certify_event_blob(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "u256",
      "u256",
      "u64",
      "u8",
      "u64",
      "u32"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "certify_event_blob",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function reserve_space(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      "u64",
      "u32",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "reserve_space",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function register_blob(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      `${packageAddress}::storage_resource::Storage`,
      "u256",
      "u256",
      "u64",
      "u8",
      "bool",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "register_blob",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function certify_blob(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      `${packageAddress}::blob::Blob`,
      "vector<u8>",
      "vector<u8>",
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "certify_blob",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function delete_blob(options) {
    const argumentsTypes = [`${packageAddress}::system::System`, `${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "delete_blob",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function extend_blob_with_resource(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      `${packageAddress}::blob::Blob`,
      `${packageAddress}::storage_resource::Storage`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "extend_blob_with_resource",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function extend_blob(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      `${packageAddress}::blob::Blob`,
      "u32",
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "extend_blob",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function add_subsidy(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
      "u32"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "add_subsidy",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function register_deny_list_update(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "u256",
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "register_deny_list_update",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function update_deny_list(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "vector<u8>",
      "vector<u8>",
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "update_deny_list",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function delete_deny_listed_blob(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      "vector<u8>",
      "vector<u8>",
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "delete_deny_listed_blob",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function epoch(options) {
    const argumentsTypes = [`${packageAddress}::system::System`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function total_capacity_size(options) {
    const argumentsTypes = [`${packageAddress}::system::System`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "total_capacity_size",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function used_capacity_size(options) {
    const argumentsTypes = [`${packageAddress}::system::System`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "used_capacity_size",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function n_shards(options) {
    const argumentsTypes = [`${packageAddress}::system::System`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "n_shards",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function advance_epoch(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      `${packageAddress}::bls_aggregate::BlsCommittee`,
      `${packageAddress}::epoch_parameters::EpochParams`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "advance_epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function package_id(options) {
    const argumentsTypes = [`${packageAddress}::system::System`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "package_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function version(options) {
    const argumentsTypes = [`${packageAddress}::system::System`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "version",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_new_package_id(options) {
    const argumentsTypes = [
      `${packageAddress}::system::System`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "set_new_package_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function migrate(options) {
    const argumentsTypes = [`${packageAddress}::system::System`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "migrate",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function inner_mut(options) {
    const argumentsTypes = [`${packageAddress}::system::System`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "inner_mut",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function inner(options) {
    const argumentsTypes = [`${packageAddress}::system::System`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "system",
      function: "inner",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    create_empty,
    invalidate_blob_id,
    certify_event_blob,
    reserve_space,
    register_blob,
    certify_blob,
    delete_blob,
    extend_blob_with_resource,
    extend_blob,
    add_subsidy,
    register_deny_list_update,
    update_deny_list,
    delete_deny_listed_blob,
    epoch,
    total_capacity_size,
    used_capacity_size,
    n_shards,
    advance_epoch,
    package_id,
    version,
    set_new_package_id,
    migrate,
    inner_mut,
    inner
  };
}
//# sourceMappingURL=system.js.map
