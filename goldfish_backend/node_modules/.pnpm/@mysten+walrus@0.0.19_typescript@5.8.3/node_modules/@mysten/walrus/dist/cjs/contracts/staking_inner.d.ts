import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function StakingInnerV1(): import("@mysten/sui/bcs").BcsType<{
    n_shards: number;
    epoch_duration: string;
    first_epoch_start: string;
    pools: {
        id: {
            id: string;
        };
        size: string;
    };
    epoch: number;
    active_set: {
        id: {
            id: string;
        };
    };
    next_committee: {
        pos0: {
            contents: {
                key: string;
                value: number[];
            }[];
        };
    } | null;
    committee: {
        pos0: {
            contents: {
                key: string;
                value: number[];
            }[];
        };
    };
    previous_committee: {
        pos0: {
            contents: {
                key: string;
                value: number[];
            }[];
        };
    };
    next_epoch_params: {
        total_capacity_size: string;
        storage_price_per_unit_size: string;
        write_price_per_unit_size: string;
    } | null;
    epoch_state: import("@mysten/bcs").EnumOutputShapeWithKeys<{
        EpochChangeSync: number;
        EpochChangeDone: string;
        NextParamsSelected: string;
    }, "EpochChangeSync" | "EpochChangeDone" | "NextParamsSelected">;
    next_epoch_public_keys: {
        id: {
            id: string;
        };
    };
}, {
    n_shards: number;
    epoch_duration: string | number | bigint;
    first_epoch_start: string | number | bigint;
    pools: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
        size: string | number | bigint;
    };
    epoch: number;
    active_set: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
    };
    next_committee: {
        pos0: {
            contents: Iterable<{
                key: string | Uint8Array<ArrayBufferLike>;
                value: Iterable<number> & {
                    length: number;
                };
            }> & {
                length: number;
            };
        };
    } | null | undefined;
    committee: {
        pos0: {
            contents: Iterable<{
                key: string | Uint8Array<ArrayBufferLike>;
                value: Iterable<number> & {
                    length: number;
                };
            }> & {
                length: number;
            };
        };
    };
    previous_committee: {
        pos0: {
            contents: Iterable<{
                key: string | Uint8Array<ArrayBufferLike>;
                value: Iterable<number> & {
                    length: number;
                };
            }> & {
                length: number;
            };
        };
    };
    next_epoch_params: {
        total_capacity_size: string | number | bigint;
        storage_price_per_unit_size: string | number | bigint;
        write_price_per_unit_size: string | number | bigint;
    } | null | undefined;
    epoch_state: import("@mysten/bcs").EnumInputShape<{
        EpochChangeSync: number;
        EpochChangeDone: string | number | bigint;
        NextParamsSelected: string | number | bigint;
    }>;
    next_epoch_public_keys: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
    };
}>;
export declare function EpochState(): import("@mysten/sui/bcs").BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    EpochChangeSync: number;
    EpochChangeDone: string;
    NextParamsSelected: string;
}, "EpochChangeSync" | "EpochChangeDone" | "NextParamsSelected">, import("@mysten/bcs").EnumInputShape<{
    EpochChangeSync: number;
    EpochChangeDone: string | number | bigint;
    NextParamsSelected: string | number | bigint;
}>>;
export declare function init(packageAddress: string): {
    _new: (options: {
        arguments: [RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    create_pool: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_commission_receiver: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    collect_commission: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    voting_end: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    select_committee_and_calculate_votes: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    quorum_above: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    quorum_below: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_governance_authorized: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    check_governance_authorization: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    get_current_node_weight: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_next_commission: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_storage_price_vote: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_write_price_vote: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_node_capacity_vote: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_next_public_key: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_name: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_network_address: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_network_public_key: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_node_metadata: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    destroy_empty_pool: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    stake_with_pool: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    request_withdraw_stake: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    withdraw_stake: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    try_join_active_set: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    compute_next_committee: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    apportionment: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    dhondt: (options: {
        arguments: [RawTransactionArgument<number | bigint[]>, RawTransactionArgument<number>, RawTransactionArgument<number | bigint[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    max_shards_per_node: (options: {
        arguments: [RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    initiate_epoch_change: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    advance_epoch: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    epoch_sync_done: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    node_metadata: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    next_committee: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    next_epoch_params: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    committee: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    previous_committee: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    next_bls_committee: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    has_pool: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    n_shards: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    calculate_rewards: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    new_walrus_context: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_quorum: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_quorum_for_n_shards: (options: {
        arguments: [RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
