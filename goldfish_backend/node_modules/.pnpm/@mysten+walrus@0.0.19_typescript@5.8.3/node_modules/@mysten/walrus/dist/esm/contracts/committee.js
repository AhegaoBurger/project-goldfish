import { bcs } from "@mysten/sui/bcs";
import * as vec_map from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_map.js";
import { normalizeMoveArguments } from "./utils/index.js";
function Committee() {
  return bcs.struct("Committee", {
    pos0: vec_map.VecMap(bcs.Address, bcs.vector(bcs.u16()))
  });
}
function init(packageAddress) {
  function empty(options) {
    const argumentsTypes = [];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "committee",
      function: "empty",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function contains(options) {
    const argumentsTypes = [
      `${packageAddress}::committee::Committee`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "committee",
      function: "contains",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function initialize(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::vec_map::VecMap<0x0000000000000000000000000000000000000000000000000000000000000002::object::ID, u16>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "committee",
      function: "initialize",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function transition(options) {
    const argumentsTypes = [
      `${packageAddress}::committee::Committee`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::vec_map::VecMap<0x0000000000000000000000000000000000000000000000000000000000000002::object::ID, u16>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "committee",
      function: "transition",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function shards(options) {
    const argumentsTypes = [
      `${packageAddress}::committee::Committee`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "committee",
      function: "shards",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function size(options) {
    const argumentsTypes = [`${packageAddress}::committee::Committee`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "committee",
      function: "size",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function inner(options) {
    const argumentsTypes = [`${packageAddress}::committee::Committee`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "committee",
      function: "inner",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function to_inner(options) {
    const argumentsTypes = [`${packageAddress}::committee::Committee`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "committee",
      function: "to_inner",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function diff(options) {
    const argumentsTypes = [
      `${packageAddress}::committee::Committee`,
      `${packageAddress}::committee::Committee`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "committee",
      function: "diff",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return { empty, contains, initialize, transition, shards, size, inner, to_inner, diff };
}
export {
  Committee,
  init
};
//# sourceMappingURL=committee.js.map
