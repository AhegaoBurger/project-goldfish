"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var messages_exports = {};
__export(messages_exports, {
  BlobPersistenceType: () => BlobPersistenceType,
  CertifiedBlobMessage: () => CertifiedBlobMessage,
  CertifiedInvalidBlobId: () => CertifiedInvalidBlobId,
  CertifiedMessage: () => CertifiedMessage,
  DenyListBlobDeleted: () => DenyListBlobDeleted,
  DenyListUpdateMessage: () => DenyListUpdateMessage,
  ProofOfPossessionMessage: () => ProofOfPossessionMessage,
  init: () => init
});
module.exports = __toCommonJS(messages_exports);
var import_bcs = require("@mysten/sui/bcs");
var import_utils = require("./utils/index.js");
function ProofOfPossessionMessage() {
  return import_bcs.bcs.struct("ProofOfPossessionMessage", {
    intent_type: import_bcs.bcs.u8(),
    intent_version: import_bcs.bcs.u8(),
    intent_app: import_bcs.bcs.u8(),
    epoch: import_bcs.bcs.u32(),
    sui_address: import_bcs.bcs.Address,
    bls_key: import_bcs.bcs.vector(import_bcs.bcs.u8())
  });
}
function CertifiedMessage() {
  return import_bcs.bcs.struct("CertifiedMessage", {
    intent_type: import_bcs.bcs.u8(),
    intent_version: import_bcs.bcs.u8(),
    cert_epoch: import_bcs.bcs.u32(),
    message: import_bcs.bcs.vector(import_bcs.bcs.u8()),
    stake_support: import_bcs.bcs.u16()
  });
}
function CertifiedBlobMessage() {
  return import_bcs.bcs.struct("CertifiedBlobMessage", {
    blob_id: import_bcs.bcs.u256(),
    blob_persistence_type: BlobPersistenceType()
  });
}
function CertifiedInvalidBlobId() {
  return import_bcs.bcs.struct("CertifiedInvalidBlobId", {
    blob_id: import_bcs.bcs.u256()
  });
}
function DenyListUpdateMessage() {
  return import_bcs.bcs.struct("DenyListUpdateMessage", {
    storage_node_id: import_bcs.bcs.Address,
    deny_list_sequence_number: import_bcs.bcs.u64(),
    deny_list_size: import_bcs.bcs.u64(),
    deny_list_root: import_bcs.bcs.u256()
  });
}
function DenyListBlobDeleted() {
  return import_bcs.bcs.struct("DenyListBlobDeleted", {
    blob_id: import_bcs.bcs.u256()
  });
}
function BlobPersistenceType() {
  return import_bcs.bcs.enum("BlobPersistenceType", {
    Permanent: null,
    Deletable: import_bcs.bcs.Address
  });
}
function init(packageAddress) {
  function new_proof_of_possession_msg(options) {
    const argumentsTypes = ["u32", "address", "vector<u8>"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "new_proof_of_possession_msg",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function to_bcs(options) {
    const argumentsTypes = [`${packageAddress}::messages::ProofOfPossessionMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "to_bcs",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function verify_proof_of_possession(options) {
    const argumentsTypes = [`${packageAddress}::messages::ProofOfPossessionMessage`, "vector<u8>"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "verify_proof_of_possession",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function new_certified_message(options) {
    const argumentsTypes = ["vector<u8>", "u32", "u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "new_certified_message",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function certify_blob_message(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "certify_blob_message",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function certified_event_blob_message(options) {
    const argumentsTypes = ["u256"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "certified_event_blob_message",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function invalid_blob_id_message(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "invalid_blob_id_message",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function deny_list_update_message(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "deny_list_update_message",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function deny_list_blob_deleted_message(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "deny_list_blob_deleted_message",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function intent_type(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "intent_type",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function intent_version(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "intent_version",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function cert_epoch(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "cert_epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function stake_support(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "stake_support",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function message(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "message",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function into_message(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "into_message",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function certified_blob_id(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedBlobMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "certified_blob_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function blob_persistence_type(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedBlobMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "blob_persistence_type",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function invalid_blob_id(options) {
    const argumentsTypes = [`${packageAddress}::messages::CertifiedInvalidBlobId`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "invalid_blob_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function storage_node_id(options) {
    const argumentsTypes = [`${packageAddress}::messages::DenyListUpdateMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "storage_node_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function sequence_number(options) {
    const argumentsTypes = [`${packageAddress}::messages::DenyListUpdateMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "sequence_number",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function size(options) {
    const argumentsTypes = [`${packageAddress}::messages::DenyListUpdateMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "size",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function root(options) {
    const argumentsTypes = [`${packageAddress}::messages::DenyListUpdateMessage`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "root",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function blob_id(options) {
    const argumentsTypes = [`${packageAddress}::messages::DenyListBlobDeleted`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "blob_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function is_deletable(options) {
    const argumentsTypes = [`${packageAddress}::messages::BlobPersistenceType`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "is_deletable",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function object_id(options) {
    const argumentsTypes = [`${packageAddress}::messages::BlobPersistenceType`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "object_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function peel_blob_persistence_type(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::bcs::BCS"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "messages",
      function: "peel_blob_persistence_type",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    new_proof_of_possession_msg,
    to_bcs,
    verify_proof_of_possession,
    new_certified_message,
    certify_blob_message,
    certified_event_blob_message,
    invalid_blob_id_message,
    deny_list_update_message,
    deny_list_blob_deleted_message,
    intent_type,
    intent_version,
    cert_epoch,
    stake_support,
    message,
    into_message,
    certified_blob_id,
    blob_persistence_type,
    invalid_blob_id,
    storage_node_id,
    sequence_number,
    size,
    root,
    blob_id,
    is_deletable,
    object_id,
    peel_blob_persistence_type
  };
}
//# sourceMappingURL=messages.js.map
