import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function WalrusContext(): import("@mysten/sui/bcs").BcsType<{
    epoch: number;
    committee_selected: boolean;
    committee: {
        contents: {
            key: string;
            value: number[];
        }[];
    };
}, {
    epoch: number;
    committee_selected: boolean;
    committee: {
        contents: Iterable<{
            key: string | Uint8Array<ArrayBufferLike>;
            value: Iterable<number> & {
                length: number;
            };
        }> & {
            length: number;
        };
    };
}>;
export declare function init(packageAddress: string): {
    _new: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<boolean>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    committee_selected: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    committee: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
