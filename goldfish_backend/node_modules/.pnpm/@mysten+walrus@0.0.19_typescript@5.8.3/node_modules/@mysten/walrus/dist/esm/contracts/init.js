import { bcs } from "@mysten/sui/bcs";
import * as object from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js";
import * as _package from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/package.js";
import { normalizeMoveArguments } from "./utils/index.js";
function INIT() {
  return bcs.struct("INIT", {
    dummy_field: bcs.bool()
  });
}
function InitCap() {
  return bcs.struct("InitCap", {
    id: object.UID(),
    publisher: _package.Publisher()
  });
}
function init(packageAddress) {
  function init2(options) {
    const argumentsTypes = [`${packageAddress}::init::INIT`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "init",
      function: "init",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function initialize_walrus(options) {
    const argumentsTypes = [
      `${packageAddress}::init::InitCap`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::package::UpgradeCap",
      "u64",
      "u64",
      "u16",
      "u32",
      "0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "init",
      function: "initialize_walrus",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function migrate(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::system::System`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "init",
      function: "migrate",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return { init: init2, initialize_walrus, migrate };
}
export {
  INIT,
  InitCap,
  init
};
//# sourceMappingURL=init.js.map
