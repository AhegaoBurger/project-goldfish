{
  "version": 3,
  "sources": ["../../../src/contracts/epoch_parameters.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function EpochParams() {\n\treturn bcs.struct('EpochParams', {\n\t\ttotal_capacity_size: bcs.u64(),\n\t\tstorage_price_per_unit_size: bcs.u64(),\n\t\twrite_price_per_unit_size: bcs.u64(),\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction _new(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = ['u64', 'u64', 'u64'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'epoch_parameters',\n\t\t\t\tfunction: 'new',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction capacity(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::epoch_parameters::EpochParams`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'epoch_parameters',\n\t\t\t\tfunction: 'capacity',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction storage_price(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::epoch_parameters::EpochParams`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'epoch_parameters',\n\t\t\t\tfunction: 'storage_price',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction write_price(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::epoch_parameters::EpochParams`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'epoch_parameters',\n\t\t\t\tfunction: 'write_price',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\treturn { _new, capacity, storage_price, write_price };\n}\n"],
  "mappings": "AAGA,SAAS,WAAW;AAGpB,SAAS,8BAA8B;AAGhC,SAAS,cAAc;AAC7B,SAAO,IAAI,OAAO,eAAe;AAAA,IAChC,qBAAqB,IAAI,IAAI;AAAA,IAC7B,6BAA6B,IAAI,IAAI;AAAA,IACrC,2BAA2B,IAAI,IAAI;AAAA,EACpC,CAAC;AACF;AACO,SAAS,KAAK,gBAAwB;AAC5C,WAAS,KAAK,SAMX;AACF,UAAM,iBAAiB,CAAC,OAAO,OAAO,KAAK;AAC3C,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,SAAS,SAA0D;AAC3E,UAAM,iBAAiB,CAAC,GAAG,cAAc,iCAAiC;AAC1E,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,cAAc,SAA0D;AAChF,UAAM,iBAAiB,CAAC,GAAG,cAAc,iCAAiC;AAC1E,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,YAAY,SAA0D;AAC9E,UAAM,iBAAiB,CAAC,GAAG,cAAc,iCAAiC;AAC1E,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,SAAO,EAAE,MAAM,UAAU,eAAe,YAAY;AACrD;",
  "names": []
}
