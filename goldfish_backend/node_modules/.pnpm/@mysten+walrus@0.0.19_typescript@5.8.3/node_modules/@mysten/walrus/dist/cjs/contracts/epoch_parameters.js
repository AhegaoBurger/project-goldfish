"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var epoch_parameters_exports = {};
__export(epoch_parameters_exports, {
  EpochParams: () => EpochParams,
  init: () => init
});
module.exports = __toCommonJS(epoch_parameters_exports);
var import_bcs = require("@mysten/sui/bcs");
var import_utils = require("./utils/index.js");
function EpochParams() {
  return import_bcs.bcs.struct("EpochParams", {
    total_capacity_size: import_bcs.bcs.u64(),
    storage_price_per_unit_size: import_bcs.bcs.u64(),
    write_price_per_unit_size: import_bcs.bcs.u64()
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = ["u64", "u64", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "epoch_parameters",
      function: "new",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function capacity(options) {
    const argumentsTypes = [`${packageAddress}::epoch_parameters::EpochParams`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "epoch_parameters",
      function: "capacity",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function storage_price(options) {
    const argumentsTypes = [`${packageAddress}::epoch_parameters::EpochParams`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "epoch_parameters",
      function: "storage_price",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function write_price(options) {
    const argumentsTypes = [`${packageAddress}::epoch_parameters::EpochParams`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "epoch_parameters",
      function: "write_price",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return { _new, capacity, storage_price, write_price };
}
//# sourceMappingURL=epoch_parameters.js.map
