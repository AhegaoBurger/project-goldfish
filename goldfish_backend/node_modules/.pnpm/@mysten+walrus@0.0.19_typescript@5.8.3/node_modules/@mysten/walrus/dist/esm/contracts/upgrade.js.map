{
  "version": 3,
  "sources": ["../../../src/contracts/upgrade.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport * as object from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js';\nimport * as _package from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/package.js';\nimport * as table from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/table.js';\nimport * as vec_set from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_set.js';\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function PackageDigest() {\n\treturn bcs.struct('PackageDigest', {\n\t\tpos0: bcs.vector(bcs.u8()),\n\t});\n}\nexport function UpgradeProposal() {\n\treturn bcs.struct('UpgradeProposal', {\n\t\tepoch: bcs.u32(),\n\t\tdigest: PackageDigest(),\n\t\tversion: bcs.u64(),\n\t\tvoting_weight: bcs.u16(),\n\t\tvoters: vec_set.VecSet(bcs.Address),\n\t});\n}\nexport function UpgradeManager() {\n\treturn bcs.struct('UpgradeManager', {\n\t\tid: object.UID(),\n\t\tcap: _package.UpgradeCap(),\n\t\tupgrade_proposals: table.Table(),\n\t});\n}\nexport function EmergencyUpgradeCap() {\n\treturn bcs.struct('EmergencyUpgradeCap', {\n\t\tid: object.UID(),\n\t\tupgrade_manager_id: bcs.Address,\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction _new(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::package::UpgradeCap',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'upgrade',\n\t\t\t\tfunction: 'new',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction vote_for_upgrade(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number[]>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::upgrade::UpgradeManager`,\n\t\t\t`${packageAddress}::staking::Staking`,\n\t\t\t`${packageAddress}::auth::Authenticated`,\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::object::ID',\n\t\t\t'vector<u8>',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'upgrade',\n\t\t\t\tfunction: 'vote_for_upgrade',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction authorize_upgrade(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number[]>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::upgrade::UpgradeManager`,\n\t\t\t`${packageAddress}::staking::Staking`,\n\t\t\t'vector<u8>',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'upgrade',\n\t\t\t\tfunction: 'authorize_upgrade',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction authorize_emergency_upgrade(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number[]>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::upgrade::UpgradeManager`,\n\t\t\t`${packageAddress}::upgrade::EmergencyUpgradeCap`,\n\t\t\t'vector<u8>',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'upgrade',\n\t\t\t\tfunction: 'authorize_emergency_upgrade',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction commit_upgrade(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::upgrade::UpgradeManager`,\n\t\t\t`${packageAddress}::staking::Staking`,\n\t\t\t`${packageAddress}::system::System`,\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::package::UpgradeReceipt',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'upgrade',\n\t\t\t\tfunction: 'commit_upgrade',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction cleanup_upgrade_proposals(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number[][]>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::upgrade::UpgradeManager`,\n\t\t\t`${packageAddress}::staking::Staking`,\n\t\t\t'vector<vector<u8>>',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'upgrade',\n\t\t\t\tfunction: 'cleanup_upgrade_proposals',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction burn_emergency_upgrade_cap(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::upgrade::EmergencyUpgradeCap`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'upgrade',\n\t\t\t\tfunction: 'burn_emergency_upgrade_cap',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction fresh_proposal(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<number>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number | bigint>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = ['u32', `${packageAddress}::upgrade::PackageDigest`, 'u64'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'upgrade',\n\t\t\t\tfunction: 'fresh_proposal',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction add_vote(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::upgrade::UpgradeProposal`,\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::object::ID',\n\t\t\t'u16',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'upgrade',\n\t\t\t\tfunction: 'add_vote',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\treturn {\n\t\t_new,\n\t\tvote_for_upgrade,\n\t\tauthorize_upgrade,\n\t\tauthorize_emergency_upgrade,\n\t\tcommit_upgrade,\n\t\tcleanup_upgrade_proposals,\n\t\tburn_emergency_upgrade_cap,\n\t\tfresh_proposal,\n\t\tadd_vote,\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
