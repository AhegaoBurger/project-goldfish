{
  "version": 3,
  "sources": ["../../../src/contracts/staked_wal.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport * as balance from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/balance.js';\nimport * as object from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js';\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function StakedWal() {\n\treturn bcs.struct('StakedWal', {\n\t\tid: object.UID(),\n\t\tstate: StakedWalState(),\n\t\tnode_id: bcs.Address,\n\t\tprincipal: balance.Balance(),\n\t\tactivation_epoch: bcs.u32(),\n\t});\n}\nexport function StakedWalState() {\n\treturn bcs.enum('StakedWalState', {\n\t\tStaked: null,\n\t\tWithdrawing: bcs.u32(),\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction mint(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<number>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000002::object::ID',\n\t\t\t`0x0000000000000000000000000000000000000000000000000000000000000002::balance::Balance<${packageAddress}::wal::WAL>`,\n\t\t\t'u32',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'mint',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction into_balance(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'into_balance',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction set_withdrawing(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<number>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`, 'u32'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'set_withdrawing',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction can_withdraw_early(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<boolean>,\n\t\t\tRawTransactionArgument<string>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::staked_wal::StakedWal`,\n\t\t\t'bool',\n\t\t\t`${packageAddress}::walrus_context::WalrusContext`,\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'can_withdraw_early',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction node_id(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'node_id',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction value(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'value',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction activation_epoch(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'activation_epoch',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction is_staked(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'is_staked',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction is_withdrawing(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'is_withdrawing',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction withdraw_epoch(options: { arguments: [RawTransactionArgument<string>] }) {\n\t\tconst argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'withdraw_epoch',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction join(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::staked_wal::StakedWal`,\n\t\t\t`${packageAddress}::staked_wal::StakedWal`,\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'join',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction split(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];\n\t}) {\n\t\tconst argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`, 'u64'];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'staked_wal',\n\t\t\t\tfunction: 'split',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\treturn {\n\t\tmint,\n\t\tinto_balance,\n\t\tset_withdrawing,\n\t\tcan_withdraw_early,\n\t\tnode_id,\n\t\tvalue,\n\t\tactivation_epoch,\n\t\tis_staked,\n\t\tis_withdrawing,\n\t\twithdraw_epoch,\n\t\tjoin,\n\t\tsplit,\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
