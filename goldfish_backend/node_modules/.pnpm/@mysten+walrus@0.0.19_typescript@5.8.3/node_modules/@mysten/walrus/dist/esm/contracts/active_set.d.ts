import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function ActiveSetEntry(): import("@mysten/sui/bcs").BcsType<{
    node_id: string;
    staked_amount: string;
}, {
    node_id: string | Uint8Array<ArrayBufferLike>;
    staked_amount: string | number | bigint;
}>;
export declare function ActiveSet(): import("@mysten/sui/bcs").BcsType<{
    max_size: number;
    threshold_stake: string;
    nodes: {
        node_id: string;
        staked_amount: string;
    }[];
    total_stake: string;
}, {
    max_size: number;
    threshold_stake: string | number | bigint;
    nodes: Iterable<{
        node_id: string | Uint8Array<ArrayBufferLike>;
        staked_amount: string | number | bigint;
    }> & {
        length: number;
    };
    total_stake: string | number | bigint;
}>;
export declare function init(packageAddress: string): {
    _new: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    insert_or_update: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    update: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    insert: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    remove: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    max_size: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    size: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    active_ids: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    active_ids_and_stake: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    threshold_stake: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    total_stake: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
