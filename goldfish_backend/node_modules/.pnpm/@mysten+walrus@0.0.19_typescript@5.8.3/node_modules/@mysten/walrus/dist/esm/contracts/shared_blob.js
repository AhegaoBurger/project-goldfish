import { bcs } from "@mysten/sui/bcs";
import * as blob from "./blob.js";
import * as balance from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/balance.js";
import * as object from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js";
import { normalizeMoveArguments } from "./utils/index.js";
function SharedBlob() {
  return bcs.struct("SharedBlob", {
    id: object.UID(),
    blob: blob.Blob(),
    funds: balance.Balance()
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = [`${packageAddress}::blob::Blob`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "shared_blob",
      function: "new",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function new_funded(options) {
    const argumentsTypes = [
      `${packageAddress}::blob::Blob`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "shared_blob",
      function: "new_funded",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function fund(options) {
    const argumentsTypes = [
      `${packageAddress}::shared_blob::SharedBlob`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "shared_blob",
      function: "fund",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function extend(options) {
    const argumentsTypes = [
      `${packageAddress}::shared_blob::SharedBlob`,
      `${packageAddress}::system::System`,
      "u32"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "shared_blob",
      function: "extend",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return { _new, new_funded, fund, extend };
}
export {
  SharedBlob,
  init
};
//# sourceMappingURL=shared_blob.js.map
