"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var staking_exports = {};
__export(staking_exports, {
  Staking: () => Staking,
  init: () => init
});
module.exports = __toCommonJS(staking_exports);
var import_bcs = require("@mysten/sui/bcs");
var object = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js"));
var import_utils = require("./utils/index.js");
function Staking() {
  return import_bcs.bcs.struct("Staking", {
    id: object.UID(),
    version: import_bcs.bcs.u64(),
    package_id: import_bcs.bcs.Address,
    new_package_id: import_bcs.bcs.option(import_bcs.bcs.Address)
  });
}
function init(packageAddress) {
  function create(options) {
    const argumentsTypes = [
      "u64",
      "u64",
      "u16",
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      "0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "create",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function register_candidate(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String",
      `${packageAddress}::node_metadata::NodeMetadata`,
      "vector<u8>",
      "vector<u8>",
      "vector<u8>",
      "u16",
      "u64",
      "u64",
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "register_candidate",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_next_commission(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "u16"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_next_commission",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function collect_commission(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      `${packageAddress}::auth::Authenticated`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "collect_commission",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_commission_receiver(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      `${packageAddress}::auth::Authenticated`,
      `${packageAddress}::auth::Authorized`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_commission_receiver",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_governance_authorized(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      `${packageAddress}::auth::Authenticated`,
      `${packageAddress}::auth::Authorized`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_governance_authorized",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function check_governance_authorization(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      `${packageAddress}::auth::Authenticated`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "check_governance_authorization",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function get_current_node_weight(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "get_current_node_weight",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function compute_next_committee(options) {
    const argumentsTypes = [`${packageAddress}::staking::Staking`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "compute_next_committee",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_storage_price_vote(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_storage_price_vote",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_write_price_vote(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_write_price_vote",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_node_capacity_vote(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_node_capacity_vote",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function node_metadata(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "node_metadata",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_next_public_key(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "vector<u8>",
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_next_public_key",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_name(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_name",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_network_address(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "0x0000000000000000000000000000000000000000000000000000000000000001::string::String"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_network_address",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_network_public_key(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "vector<u8>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_network_public_key",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_node_metadata(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      `${packageAddress}::node_metadata::NodeMetadata`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_node_metadata",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function voting_end(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "voting_end",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function initiate_epoch_change(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::system::System`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "initiate_epoch_change",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function epoch_sync_done(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`,
      "u32",
      "0x0000000000000000000000000000000000000000000000000000000000000002::clock::Clock"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "epoch_sync_done",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function stake_with_pool(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "stake_with_pool",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function request_withdraw_stake(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::staked_wal::StakedWal`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "request_withdraw_stake",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function withdraw_stake(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::staked_wal::StakedWal`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "withdraw_stake",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function try_join_active_set(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      `${packageAddress}::storage_node::StorageNodeCap`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "try_join_active_set",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function package_id(options) {
    const argumentsTypes = [`${packageAddress}::staking::Staking`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "package_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function version(options) {
    const argumentsTypes = [`${packageAddress}::staking::Staking`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "version",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function epoch(options) {
    const argumentsTypes = [`${packageAddress}::staking::Staking`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function is_quorum(options) {
    const argumentsTypes = [`${packageAddress}::staking::Staking`, "u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "is_quorum",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function calculate_rewards(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      "u64",
      "u32",
      "u32"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "calculate_rewards",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_new_package_id(options) {
    const argumentsTypes = [
      `${packageAddress}::staking::Staking`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "set_new_package_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function migrate(options) {
    const argumentsTypes = [`${packageAddress}::staking::Staking`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "migrate",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function inner_mut(options) {
    const argumentsTypes = [`${packageAddress}::staking::Staking`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "inner_mut",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function inner(options) {
    const argumentsTypes = [`${packageAddress}::staking::Staking`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staking",
      function: "inner",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    create,
    register_candidate,
    set_next_commission,
    collect_commission,
    set_commission_receiver,
    set_governance_authorized,
    check_governance_authorization,
    get_current_node_weight,
    compute_next_committee,
    set_storage_price_vote,
    set_write_price_vote,
    set_node_capacity_vote,
    node_metadata,
    set_next_public_key,
    set_name,
    set_network_address,
    set_network_public_key,
    set_node_metadata,
    voting_end,
    initiate_epoch_change,
    epoch_sync_done,
    stake_with_pool,
    request_withdraw_stake,
    withdraw_stake,
    try_join_active_set,
    package_id,
    version,
    epoch,
    is_quorum,
    calculate_rewards,
    set_new_package_id,
    migrate,
    inner_mut,
    inner
  };
}
//# sourceMappingURL=staking.js.map
