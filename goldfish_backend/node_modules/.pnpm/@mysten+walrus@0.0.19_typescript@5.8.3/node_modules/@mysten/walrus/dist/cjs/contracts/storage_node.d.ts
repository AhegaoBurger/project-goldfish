import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function StorageNodeInfo(): import("@mysten/sui/bcs").BcsType<{
    name: string;
    node_id: string;
    network_address: string;
    public_key: {
        bytes: number[];
    };
    next_epoch_public_key: {
        bytes: number[];
    } | null;
    network_public_key: number[];
    metadata: {
        id: {
            id: string;
        };
    };
}, {
    name: string;
    node_id: string | Uint8Array<ArrayBufferLike>;
    network_address: string;
    public_key: {
        bytes: Iterable<number> & {
            length: number;
        };
    };
    next_epoch_public_key: {
        bytes: Iterable<number> & {
            length: number;
        };
    } | null | undefined;
    network_public_key: Iterable<number> & {
        length: number;
    };
    metadata: {
        id: {
            id: string | Uint8Array<ArrayBufferLike>;
        };
    };
}>;
export declare function StorageNodeCap(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    node_id: string;
    last_epoch_sync_done: number;
    last_event_blob_attestation: {
        checkpoint_sequence_num: string;
        epoch: number;
    } | null;
    deny_list_root: string;
    deny_list_sequence: string;
    deny_list_size: string;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    node_id: string | Uint8Array<ArrayBufferLike>;
    last_epoch_sync_done: number;
    last_event_blob_attestation: {
        checkpoint_sequence_num: string | number | bigint;
        epoch: number;
    } | null | undefined;
    deny_list_root: string | number | bigint;
    deny_list_sequence: string | number | bigint;
    deny_list_size: string | number | bigint;
}>;
export declare function init(packageAddress: string): {
    _new: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    new_cap: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    public_key: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    metadata: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    next_epoch_public_key: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    node_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    last_epoch_sync_done: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    last_event_blob_attestation: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    deny_list_root: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    deny_list_sequence: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_last_epoch_sync_done: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_last_event_blob_attestation: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_next_public_key: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_name: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_network_address: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_network_public_key: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_node_metadata: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    rotate_public_key: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    destroy: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_deny_list_properties: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
