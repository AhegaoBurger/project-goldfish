"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var auth_exports = {};
__export(auth_exports, {
  Authenticated: () => Authenticated,
  Authorized: () => Authorized,
  init: () => init
});
module.exports = __toCommonJS(auth_exports);
var import_bcs = require("@mysten/sui/bcs");
var import_utils = require("./utils/index.js");
function Authenticated() {
  return import_bcs.bcs.enum("Authenticated", {
    Sender: import_bcs.bcs.Address,
    Object: import_bcs.bcs.Address
  });
}
function Authorized() {
  return import_bcs.bcs.enum("Authorized", {
    Address: import_bcs.bcs.Address,
    ObjectID: import_bcs.bcs.Address
  });
}
function init(packageAddress) {
  function authenticate_sender(options) {
    const argumentsTypes = [];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "auth",
      function: "authenticate_sender",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function authenticate_with_object(options) {
    const argumentsTypes = [`${options.typeArguments[0]}`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "auth",
      function: "authenticate_with_object",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes),
      typeArguments: options.typeArguments
    });
  }
  function authorized_address(options) {
    const argumentsTypes = ["address"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "auth",
      function: "authorized_address",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function authorized_object(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "auth",
      function: "authorized_object",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function matches(options) {
    const argumentsTypes = [
      `${packageAddress}::auth::Authenticated`,
      `${packageAddress}::auth::Authorized`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "auth",
      function: "matches",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    authenticate_sender,
    authenticate_with_object,
    authorized_address,
    authorized_object,
    matches
  };
}
//# sourceMappingURL=auth.js.map
