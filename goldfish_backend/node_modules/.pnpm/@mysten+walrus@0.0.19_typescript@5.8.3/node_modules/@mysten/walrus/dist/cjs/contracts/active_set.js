"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var active_set_exports = {};
__export(active_set_exports, {
  ActiveSet: () => ActiveSet,
  ActiveSetEntry: () => ActiveSetEntry,
  init: () => init
});
module.exports = __toCommonJS(active_set_exports);
var import_bcs = require("@mysten/sui/bcs");
var import_utils = require("./utils/index.js");
function ActiveSetEntry() {
  return import_bcs.bcs.struct("ActiveSetEntry", {
    node_id: import_bcs.bcs.Address,
    staked_amount: import_bcs.bcs.u64()
  });
}
function ActiveSet() {
  return import_bcs.bcs.struct("ActiveSet", {
    max_size: import_bcs.bcs.u16(),
    threshold_stake: import_bcs.bcs.u64(),
    nodes: import_bcs.bcs.vector(ActiveSetEntry()),
    total_stake: import_bcs.bcs.u64()
  });
}
function init(packageAddress) {
  function _new(options) {
    const argumentsTypes = ["u16", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "new",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function insert_or_update(options) {
    const argumentsTypes = [
      `${packageAddress}::active_set::ActiveSet`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "insert_or_update",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function update(options) {
    const argumentsTypes = [
      `${packageAddress}::active_set::ActiveSet`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "update",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function insert(options) {
    const argumentsTypes = [
      `${packageAddress}::active_set::ActiveSet`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "insert",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function remove(options) {
    const argumentsTypes = [
      `${packageAddress}::active_set::ActiveSet`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "remove",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function max_size(options) {
    const argumentsTypes = [`${packageAddress}::active_set::ActiveSet`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "max_size",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function size(options) {
    const argumentsTypes = [`${packageAddress}::active_set::ActiveSet`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "size",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function active_ids(options) {
    const argumentsTypes = [`${packageAddress}::active_set::ActiveSet`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "active_ids",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function active_ids_and_stake(options) {
    const argumentsTypes = [`${packageAddress}::active_set::ActiveSet`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "active_ids_and_stake",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function threshold_stake(options) {
    const argumentsTypes = [`${packageAddress}::active_set::ActiveSet`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "threshold_stake",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function total_stake(options) {
    const argumentsTypes = [`${packageAddress}::active_set::ActiveSet`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "active_set",
      function: "total_stake",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    _new,
    insert_or_update,
    update,
    insert,
    remove,
    max_size,
    size,
    active_ids,
    active_ids_and_stake,
    threshold_stake,
    total_stake
  };
}
//# sourceMappingURL=active_set.js.map
