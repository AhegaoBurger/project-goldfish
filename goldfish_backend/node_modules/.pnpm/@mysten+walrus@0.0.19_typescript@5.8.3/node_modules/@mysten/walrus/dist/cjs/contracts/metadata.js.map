{
  "version": 3,
  "sources": ["../../../src/contracts/metadata.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport * as vec_map from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_map.js';\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function Metadata() {\n\treturn bcs.struct('Metadata', {\n\t\tmetadata: vec_map.VecMap(bcs.string(), bcs.string()),\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction _new(options: { arguments: [] }) {\n\t\tconst argumentsTypes: string[] = [];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'metadata',\n\t\t\t\tfunction: 'new',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction insert_or_update(options: {\n\t\targuments: [\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t\tRawTransactionArgument<string>,\n\t\t];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::metadata::Metadata`,\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'metadata',\n\t\t\t\tfunction: 'insert_or_update',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction remove(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::metadata::Metadata`,\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'metadata',\n\t\t\t\tfunction: 'remove',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\tfunction remove_if_exists(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<string>];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::metadata::Metadata`,\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000001::string::String',\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'metadata',\n\t\t\t\tfunction: 'remove_if_exists',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t});\n\t}\n\treturn { _new, insert_or_update, remove, remove_if_exists };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAAoB;AAGpB,cAAyB;AACzB,mBAAuC;AAGhC,SAAS,WAAW;AAC1B,SAAO,eAAI,OAAO,YAAY;AAAA,IAC7B,UAAU,QAAQ,OAAO,eAAI,OAAO,GAAG,eAAI,OAAO,CAAC;AAAA,EACpD,CAAC;AACF;AACO,SAAS,KAAK,gBAAwB;AAC5C,WAAS,KAAK,SAA4B;AACzC,UAAM,iBAA2B,CAAC;AAClC,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,eAAW,qCAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,iBAAiB,SAMvB;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB;AAAA,MACA;AAAA,IACD;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,eAAW,qCAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,OAAO,SAEb;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB;AAAA,IACD;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,eAAW,qCAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,WAAS,iBAAiB,SAEvB;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc;AAAA,MACjB;AAAA,IACD;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,eAAW,qCAAuB,QAAQ,WAAW,cAAc;AAAA,IACpE,CAAC;AAAA,EACH;AACA,SAAO,EAAE,MAAM,kBAAkB,QAAQ,iBAAiB;AAC3D;",
  "names": []
}
