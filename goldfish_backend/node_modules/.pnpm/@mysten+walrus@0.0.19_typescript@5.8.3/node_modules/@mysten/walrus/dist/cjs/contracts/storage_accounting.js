"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var storage_accounting_exports = {};
__export(storage_accounting_exports, {
  FutureAccounting: () => FutureAccounting,
  FutureAccountingRingBuffer: () => FutureAccountingRingBuffer,
  init: () => init
});
module.exports = __toCommonJS(storage_accounting_exports);
var import_bcs = require("@mysten/sui/bcs");
var balance = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/balance.js"));
var import_utils = require("./utils/index.js");
function FutureAccounting() {
  return import_bcs.bcs.struct("FutureAccounting", {
    epoch: import_bcs.bcs.u32(),
    used_capacity: import_bcs.bcs.u64(),
    rewards_to_distribute: balance.Balance()
  });
}
function FutureAccountingRingBuffer() {
  return import_bcs.bcs.struct("FutureAccountingRingBuffer", {
    current_index: import_bcs.bcs.u32(),
    length: import_bcs.bcs.u32(),
    ring_buffer: import_bcs.bcs.vector(FutureAccounting())
  });
}
function init(packageAddress) {
  function new_future_accounting(options) {
    const argumentsTypes = [
      "u32",
      "u64",
      `0x0000000000000000000000000000000000000000000000000000000000000002::balance::Balance<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "new_future_accounting",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function epoch(options) {
    const argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function used_capacity(options) {
    const argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "used_capacity",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function increase_used_capacity(options) {
    const argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`, "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "increase_used_capacity",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function rewards_balance(options) {
    const argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "rewards_balance",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function delete_empty_future_accounting(options) {
    const argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "delete_empty_future_accounting",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function unwrap_balance(options) {
    const argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccounting`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "unwrap_balance",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function ring_new(options) {
    const argumentsTypes = ["u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "ring_new",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function ring_lookup_mut(options) {
    const argumentsTypes = [
      `${packageAddress}::storage_accounting::FutureAccountingRingBuffer`,
      "u32"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "ring_lookup_mut",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function ring_pop_expand(options) {
    const argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccountingRingBuffer`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "ring_pop_expand",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function max_epochs_ahead(options) {
    const argumentsTypes = [`${packageAddress}::storage_accounting::FutureAccountingRingBuffer`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "storage_accounting",
      function: "max_epochs_ahead",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    new_future_accounting,
    epoch,
    used_capacity,
    increase_used_capacity,
    rewards_balance,
    delete_empty_future_accounting,
    unwrap_balance,
    ring_new,
    ring_lookup_mut,
    ring_pop_expand,
    max_epochs_ahead
  };
}
//# sourceMappingURL=storage_accounting.js.map
