var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var _dynamicFieldCache;
import { pureBcsSchemaFromTypeName } from "@mysten/sui/bcs";
import { deriveDynamicFieldID } from "@mysten/sui/utils";
import DataLoader from "dataloader";
import { Field } from "../contracts/deps/0x0000000000000000000000000000000000000000000000000000000000000002/dynamic_field.js";
class SuiObjectDataLoader extends DataLoader {
  constructor(suiClient) {
    super(async (ids) => {
      const { objects } = await suiClient.core.getObjects({
        objectIds: ids
      });
      return objects;
    });
    __privateAdd(this, _dynamicFieldCache, /* @__PURE__ */ new Map());
  }
  async load(id, schema) {
    const data = await super.load(id);
    if (schema) {
      return schema.parse(data.content);
    }
    return data;
  }
  async loadMany(ids, schema) {
    const data = await super.loadMany(ids);
    if (!schema) {
      return data;
    }
    return data.map((d) => {
      if (d instanceof Error) {
        return d;
      }
      return schema.parse(d.content);
    });
  }
  async loadManyOrThrow(ids, schema) {
    const data = await this.loadMany(ids, schema);
    for (const d of data) {
      if (d instanceof Error) {
        throw d;
      }
    }
    return data;
  }
  clearAll() {
    __privateGet(this, _dynamicFieldCache).clear();
    return super.clearAll();
  }
  clear(key) {
    __privateGet(this, _dynamicFieldCache).delete(key);
    return super.clear(key);
  }
  async loadFieldObject(parent, name, type) {
    const schema = pureBcsSchemaFromTypeName(name.type);
    const id = deriveDynamicFieldID(parent, "u64", schema.serialize(name.value).toBytes());
    return (await this.load(id, Field(schema, type))).value;
  }
}
_dynamicFieldCache = new WeakMap();
export {
  SuiObjectDataLoader
};
//# sourceMappingURL=object-loader.js.map
