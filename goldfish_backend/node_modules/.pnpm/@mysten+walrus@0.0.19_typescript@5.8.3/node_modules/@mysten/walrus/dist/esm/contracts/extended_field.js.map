{
  "version": 3,
  "sources": ["../../../src/contracts/extended_field.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/sui/bcs';\nimport type { BcsType } from '@mysten/sui/bcs';\nimport type { Transaction } from '@mysten/sui/transactions';\n\nimport * as object from './deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js';\nimport { normalizeMoveArguments } from './utils/index.js';\nimport type { RawTransactionArgument } from './utils/index.js';\n\nexport function ExtendedField() {\n\treturn bcs.struct('ExtendedField', {\n\t\tid: object.UID(),\n\t});\n}\nexport function Key() {\n\treturn bcs.struct('Key', {\n\t\tdummy_field: bcs.bool(),\n\t});\n}\nexport function init(packageAddress: string) {\n\tfunction _new<T0 extends BcsType<any>>(options: {\n\t\targuments: [RawTransactionArgument<T0>];\n\t\ttypeArguments: [string];\n\t}) {\n\t\tconst argumentsTypes = [`${options.typeArguments[0]}`];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'extended_field',\n\t\t\t\tfunction: 'new',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t\ttypeArguments: options.typeArguments,\n\t\t\t});\n\t}\n\tfunction borrow(options: {\n\t\targuments: [RawTransactionArgument<string>];\n\t\ttypeArguments: [string];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`,\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'extended_field',\n\t\t\t\tfunction: 'borrow',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t\ttypeArguments: options.typeArguments,\n\t\t\t});\n\t}\n\tfunction borrow_mut(options: {\n\t\targuments: [RawTransactionArgument<string>];\n\t\ttypeArguments: [string];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`,\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'extended_field',\n\t\t\t\tfunction: 'borrow_mut',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t\ttypeArguments: options.typeArguments,\n\t\t\t});\n\t}\n\tfunction swap<T0 extends BcsType<any>>(options: {\n\t\targuments: [RawTransactionArgument<string>, RawTransactionArgument<T0>];\n\t\ttypeArguments: [string];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`,\n\t\t\t`${options.typeArguments[0]}`,\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'extended_field',\n\t\t\t\tfunction: 'swap',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t\ttypeArguments: options.typeArguments,\n\t\t\t});\n\t}\n\tfunction destroy(options: {\n\t\targuments: [RawTransactionArgument<string>];\n\t\ttypeArguments: [string];\n\t}) {\n\t\tconst argumentsTypes = [\n\t\t\t`${packageAddress}::extended_field::ExtendedField<${options.typeArguments[0]}>`,\n\t\t];\n\t\treturn (tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\tpackage: packageAddress,\n\t\t\t\tmodule: 'extended_field',\n\t\t\t\tfunction: 'destroy',\n\t\t\t\targuments: normalizeMoveArguments(options.arguments, argumentsTypes),\n\t\t\t\ttypeArguments: options.typeArguments,\n\t\t\t});\n\t}\n\treturn { _new, borrow, borrow_mut, swap, destroy };\n}\n"],
  "mappings": "AAGA,SAAS,WAAW;AAIpB,YAAY,YAAY;AACxB,SAAS,8BAA8B;AAGhC,SAAS,gBAAgB;AAC/B,SAAO,IAAI,OAAO,iBAAiB;AAAA,IAClC,IAAI,OAAO,IAAI;AAAA,EAChB,CAAC;AACF;AACO,SAAS,MAAM;AACrB,SAAO,IAAI,OAAO,OAAO;AAAA,IACxB,aAAa,IAAI,KAAK;AAAA,EACvB,CAAC;AACF;AACO,SAAS,KAAK,gBAAwB;AAC5C,WAAS,KAA8B,SAGpC;AACF,UAAM,iBAAiB,CAAC,GAAG,QAAQ,cAAc,CAAC,CAAC,EAAE;AACrD,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,MACnE,eAAe,QAAQ;AAAA,IACxB,CAAC;AAAA,EACH;AACA,WAAS,OAAO,SAGb;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc,mCAAmC,QAAQ,cAAc,CAAC,CAAC;AAAA,IAC7E;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,MACnE,eAAe,QAAQ;AAAA,IACxB,CAAC;AAAA,EACH;AACA,WAAS,WAAW,SAGjB;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc,mCAAmC,QAAQ,cAAc,CAAC,CAAC;AAAA,IAC7E;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,MACnE,eAAe,QAAQ;AAAA,IACxB,CAAC;AAAA,EACH;AACA,WAAS,KAA8B,SAGpC;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc,mCAAmC,QAAQ,cAAc,CAAC,CAAC;AAAA,MAC5E,GAAG,QAAQ,cAAc,CAAC,CAAC;AAAA,IAC5B;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,MACnE,eAAe,QAAQ;AAAA,IACxB,CAAC;AAAA,EACH;AACA,WAAS,QAAQ,SAGd;AACF,UAAM,iBAAiB;AAAA,MACtB,GAAG,cAAc,mCAAmC,QAAQ,cAAc,CAAC,CAAC;AAAA,IAC7E;AACA,WAAO,CAAC,OACP,GAAG,SAAS;AAAA,MACX,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,UAAU;AAAA,MACV,WAAW,uBAAuB,QAAQ,WAAW,cAAc;AAAA,MACnE,eAAe,QAAQ;AAAA,IACxB,CAAC;AAAA,EACH;AACA,SAAO,EAAE,MAAM,QAAQ,YAAY,MAAM,QAAQ;AAClD;",
  "names": []
}
