import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function BlsCommitteeMember(): import("@mysten/sui/bcs").BcsType<{
    public_key: {
        bytes: number[];
    };
    weight: number;
    node_id: string;
}, {
    public_key: {
        bytes: Iterable<number> & {
            length: number;
        };
    };
    weight: number;
    node_id: string | Uint8Array<ArrayBufferLike>;
}>;
export declare function BlsCommittee(): import("@mysten/sui/bcs").BcsType<{
    members: {
        public_key: {
            bytes: number[];
        };
        weight: number;
        node_id: string;
    }[];
    n_shards: number;
    epoch: number;
    total_aggregated_key: {
        bytes: number[];
    };
}, {
    members: Iterable<{
        public_key: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        weight: number;
        node_id: string | Uint8Array<ArrayBufferLike>;
    }> & {
        length: number;
    };
    n_shards: number;
    epoch: number;
    total_aggregated_key: {
        bytes: Iterable<number> & {
            length: number;
        };
    };
}>;
export declare function RequiredWeight(): import("@mysten/sui/bcs").BcsType<import("@mysten/bcs").EnumOutputShapeWithKeys<{
    Quorum: true;
    OneCorrectNode: true;
}, "Quorum" | "OneCorrectNode">, import("@mysten/bcs").EnumInputShape<{
    Quorum: boolean | object | null;
    OneCorrectNode: boolean | object | null;
}>>;
export declare function init(packageAddress: string): {
    new_bls_committee: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<string[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    new_bls_committee_member: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    node_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    n_shards: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    n_members: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    get_idx: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    contains: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    get_member_weight: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    find_index: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    to_vec_map: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    verify_quorum_in_epoch: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    is_quorum: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    verify_one_correct_node_in_epoch: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    includes_one_correct_node: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    verify_certificate_and_weight: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
