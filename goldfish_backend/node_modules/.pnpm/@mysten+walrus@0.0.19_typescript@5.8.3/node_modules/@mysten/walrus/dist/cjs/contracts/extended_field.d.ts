import type { BcsType } from '@mysten/sui/bcs';
import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function ExtendedField(): BcsType<{
    id: {
        id: string;
    };
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
}>;
export declare function Key(): BcsType<{
    dummy_field: boolean;
}, {
    dummy_field: boolean;
}>;
export declare function init(packageAddress: string): {
    _new: <T0 extends BcsType<any>>(options: {
        arguments: [RawTransactionArgument<T0>];
        typeArguments: [string];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    borrow: (options: {
        arguments: [RawTransactionArgument<string>];
        typeArguments: [string];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    borrow_mut: (options: {
        arguments: [RawTransactionArgument<string>];
        typeArguments: [string];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    swap: <T0 extends BcsType<any>>(options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<T0>];
        typeArguments: [string];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    destroy: (options: {
        arguments: [RawTransactionArgument<string>];
        typeArguments: [string];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
