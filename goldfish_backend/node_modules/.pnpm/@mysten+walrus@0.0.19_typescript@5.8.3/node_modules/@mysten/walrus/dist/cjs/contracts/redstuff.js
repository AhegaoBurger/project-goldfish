"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var redstuff_exports = {};
__export(redstuff_exports, {
  init: () => init
});
module.exports = __toCommonJS(redstuff_exports);
var import_utils = require("./utils/index.js");
function init(packageAddress) {
  function encoded_blob_length(options) {
    const argumentsTypes = ["u64", "u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "encoded_blob_length",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function source_symbols_primary(options) {
    const argumentsTypes = ["u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "source_symbols_primary",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function source_symbols_secondary(options) {
    const argumentsTypes = ["u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "source_symbols_secondary",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function n_source_symbols(options) {
    const argumentsTypes = ["u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "n_source_symbols",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function symbol_size(options) {
    const argumentsTypes = ["u64", "u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "symbol_size",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function metadata_size(options) {
    const argumentsTypes = ["u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "metadata_size",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function max_byzantine(options) {
    const argumentsTypes = ["u16"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "redstuff",
      function: "max_byzantine",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    encoded_blob_length,
    source_symbols_primary,
    source_symbols_secondary,
    n_source_symbols,
    symbol_size,
    metadata_size,
    max_byzantine
  };
}
//# sourceMappingURL=redstuff.js.map
