import { bcs } from "@mysten/sui/bcs";
import * as vec_map from "./deps/0x0000000000000000000000000000000000000000000000000000000000000002/vec_map.js";
import { normalizeMoveArguments } from "./utils/index.js";
function PendingValues() {
  return bcs.struct("PendingValues", {
    pos0: vec_map.VecMap(bcs.u32(), bcs.u64())
  });
}
function init(packageAddress) {
  function empty(options) {
    const argumentsTypes = [];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "empty",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function insert_or_add(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, "u32", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "insert_or_add",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function insert_or_replace(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, "u32", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "insert_or_replace",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function reduce(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, "u32", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "reduce",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function value_at(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "value_at",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function flush(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "flush",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function inner(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "inner",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function inner_mut(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "inner_mut",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function unwrap(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "unwrap",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  function is_empty(options) {
    const argumentsTypes = [`${packageAddress}::pending_values::PendingValues`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "pending_values",
      function: "is_empty",
      arguments: normalizeMoveArguments(options.arguments, argumentsTypes)
    });
  }
  return {
    empty,
    insert_or_add,
    insert_or_replace,
    reduce,
    value_at,
    flush,
    inner,
    inner_mut,
    unwrap,
    is_empty
  };
}
export {
  PendingValues,
  init
};
//# sourceMappingURL=pending_values.js.map
