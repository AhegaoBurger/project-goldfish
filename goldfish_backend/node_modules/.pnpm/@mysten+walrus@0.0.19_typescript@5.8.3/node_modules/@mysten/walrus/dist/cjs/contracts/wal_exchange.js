"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var wal_exchange_exports = {};
__export(wal_exchange_exports, {
  AdminCap: () => AdminCap,
  Exchange: () => Exchange,
  ExchangeRate: () => ExchangeRate,
  init: () => init
});
module.exports = __toCommonJS(wal_exchange_exports);
var import_bcs = require("@mysten/sui/bcs");
var balance = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/balance.js"));
var object = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js"));
var import_utils = require("./utils/index.js");
function Exchange() {
  return import_bcs.bcs.struct("Exchange", {
    id: object.UID(),
    wal: balance.Balance(),
    sui: balance.Balance(),
    rate: ExchangeRate(),
    admin: import_bcs.bcs.Address
  });
}
function AdminCap() {
  return import_bcs.bcs.struct("AdminCap", {
    id: object.UID()
  });
}
function ExchangeRate() {
  return import_bcs.bcs.struct("ExchangeRate", {
    wal: import_bcs.bcs.u64(),
    sui: import_bcs.bcs.u64()
  });
}
function init(packageAddress) {
  function new_exchange_rate(options) {
    const argumentsTypes = ["u64", "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "new_exchange_rate",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function wal_to_sui(options) {
    const argumentsTypes = [`${packageAddress}::wal_exchange::ExchangeRate`, "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "wal_to_sui",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function sui_to_wal(options) {
    const argumentsTypes = [`${packageAddress}::wal_exchange::ExchangeRate`, "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "sui_to_wal",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function _new(options) {
    const argumentsTypes = [];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "new",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function new_funded(options) {
    const argumentsTypes = [
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "new_funded",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function add_wal(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "add_wal",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function add_sui(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "add_sui",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function add_all_wal(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "add_all_wal",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function add_all_sui(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "add_all_sui",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function check_admin(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      `${packageAddress}::wal_exchange::AdminCap`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "check_admin",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function withdraw_wal(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      "u64",
      `${packageAddress}::wal_exchange::AdminCap`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "withdraw_wal",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function withdraw_sui(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      "u64",
      `${packageAddress}::wal_exchange::AdminCap`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "withdraw_sui",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_exchange_rate(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      "u64",
      "u64",
      `${packageAddress}::wal_exchange::AdminCap`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "set_exchange_rate",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function exchange_all_for_wal(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "exchange_all_for_wal",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function exchange_for_wal(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      "0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI>",
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "exchange_for_wal",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function exchange_all_for_sui(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "exchange_all_for_sui",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function exchange_for_sui(options) {
    const argumentsTypes = [
      `${packageAddress}::wal_exchange::Exchange`,
      `0x0000000000000000000000000000000000000000000000000000000000000002::coin::Coin<${packageAddress}::wal::WAL>`,
      "u64"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "wal_exchange",
      function: "exchange_for_sui",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    new_exchange_rate,
    wal_to_sui,
    sui_to_wal,
    _new,
    new_funded,
    add_wal,
    add_sui,
    add_all_wal,
    add_all_sui,
    check_admin,
    withdraw_wal,
    withdraw_sui,
    set_exchange_rate,
    exchange_all_for_wal,
    exchange_for_wal,
    exchange_all_for_sui,
    exchange_for_sui
  };
}
//# sourceMappingURL=wal_exchange.js.map
