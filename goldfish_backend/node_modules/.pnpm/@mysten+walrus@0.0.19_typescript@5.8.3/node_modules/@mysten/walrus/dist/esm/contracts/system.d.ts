import type { Transaction } from '@mysten/sui/transactions';
import type { RawTransactionArgument } from './utils/index.js';
export declare function System(): import("@mysten/sui/bcs").BcsType<{
    id: {
        id: string;
    };
    version: string;
    package_id: string;
    new_package_id: string | null;
}, {
    id: {
        id: string | Uint8Array<ArrayBufferLike>;
    };
    version: string | number | bigint;
    package_id: string | Uint8Array<ArrayBufferLike>;
    new_package_id: string | Uint8Array<ArrayBufferLike> | null | undefined;
}>;
export declare function init(packageAddress: string): {
    create_empty: (options: {
        arguments: [RawTransactionArgument<number>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    invalidate_blob_id: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    certify_event_blob: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    reserve_space: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    register_blob: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number>, RawTransactionArgument<boolean>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    certify_blob: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    delete_blob: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    extend_blob_with_resource: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    extend_blob: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    add_subsidy: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    register_deny_list_update: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number | bigint>, RawTransactionArgument<number | bigint>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    update_deny_list: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    delete_deny_listed_blob: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>, RawTransactionArgument<number[]>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    epoch: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    total_capacity_size: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    used_capacity_size: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    n_shards: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    advance_epoch: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    package_id: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    version: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    set_new_package_id: (options: {
        arguments: [RawTransactionArgument<string>, RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    migrate: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    inner_mut: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
    inner: (options: {
        arguments: [RawTransactionArgument<string>];
    }) => (tx: Transaction) => import("@mysten/sui/transactions").TransactionResult;
};
