"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var staked_wal_exports = {};
__export(staked_wal_exports, {
  StakedWal: () => StakedWal,
  StakedWalState: () => StakedWalState,
  init: () => init
});
module.exports = __toCommonJS(staked_wal_exports);
var import_bcs = require("@mysten/sui/bcs");
var balance = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/balance.js"));
var object = __toESM(require("./deps/0x0000000000000000000000000000000000000000000000000000000000000002/object.js"));
var import_utils = require("./utils/index.js");
function StakedWal() {
  return import_bcs.bcs.struct("StakedWal", {
    id: object.UID(),
    state: StakedWalState(),
    node_id: import_bcs.bcs.Address,
    principal: balance.Balance(),
    activation_epoch: import_bcs.bcs.u32()
  });
}
function StakedWalState() {
  return import_bcs.bcs.enum("StakedWalState", {
    Staked: null,
    Withdrawing: import_bcs.bcs.u32()
  });
}
function init(packageAddress) {
  function mint(options) {
    const argumentsTypes = [
      "0x0000000000000000000000000000000000000000000000000000000000000002::object::ID",
      `0x0000000000000000000000000000000000000000000000000000000000000002::balance::Balance<${packageAddress}::wal::WAL>`,
      "u32"
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "mint",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function into_balance(options) {
    const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "into_balance",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function set_withdrawing(options) {
    const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`, "u32"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "set_withdrawing",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function can_withdraw_early(options) {
    const argumentsTypes = [
      `${packageAddress}::staked_wal::StakedWal`,
      "bool",
      `${packageAddress}::walrus_context::WalrusContext`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "can_withdraw_early",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function node_id(options) {
    const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "node_id",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function value(options) {
    const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "value",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function activation_epoch(options) {
    const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "activation_epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function is_staked(options) {
    const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "is_staked",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function is_withdrawing(options) {
    const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "is_withdrawing",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function withdraw_epoch(options) {
    const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "withdraw_epoch",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function join(options) {
    const argumentsTypes = [
      `${packageAddress}::staked_wal::StakedWal`,
      `${packageAddress}::staked_wal::StakedWal`
    ];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "join",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  function split(options) {
    const argumentsTypes = [`${packageAddress}::staked_wal::StakedWal`, "u64"];
    return (tx) => tx.moveCall({
      package: packageAddress,
      module: "staked_wal",
      function: "split",
      arguments: (0, import_utils.normalizeMoveArguments)(options.arguments, argumentsTypes)
    });
  }
  return {
    mint,
    into_balance,
    set_withdrawing,
    can_withdraw_early,
    node_id,
    value,
    activation_epoch,
    is_staked,
    is_withdrawing,
    withdraw_epoch,
    join,
    split
  };
}
//# sourceMappingURL=staked_wal.js.map
